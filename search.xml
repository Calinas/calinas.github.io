<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <link href="/css-box-model.html"/>
      <url>/css-box-model.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/css-center.html"/>
      <url>/css-center.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>git总结</title>
      <link href="/git.html"/>
      <url>/git.html</url>
      
        <content type="html"><![CDATA[<blockquote><ol><li>git windows安装以及基础设置</li></ol></blockquote><p>windows上面直接去git官网下载安装程序，安装完成后，开始菜单有git bash就证明成功了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"Jane"</span></span><br><span class="line">$ git config --global user.email <span class="string">"xxx@email.com"</span></span><br></pre></td></tr></table></figure><p>git config的–global参数，表示你这台机器上所有的Git仓库都会使用这个配置。当然也可以针对不同仓库单独设置。</p><blockquote><ol start="2"><li>初始化仓库(创建版本库)</li></ol></blockquote><p>版本库和仓库是一个意思，repository即repo。这个仓库里面的所有文件通过git管理。在某一个目录下面通过git init命令来初始化一个仓库。此后文件的修改等都可以被跟踪。</p><p>.git这个目录是用来跟踪仓库变化的。没看到这个目录可能是因为默认隐藏了。</p><p>git add file.txt 是把文件添加到仓库中，而git commit -m ‘commit-message’是文件提交，这里涉及到两个概念就是工作区和暂存区。</p><blockquote><ol start="3"><li>工作区和暂存区</li></ol></blockquote><p>工作区就是电脑里能看到的目录，而暂存区里面隐藏的目录.git就是git的版本库。</p><p>git add就是把文件修改从工作区添加到暂存区<br>git commit就是从暂存区提交到当前分支。git默认创建的是master分支。</p><p>我们可以多次git add把文件添加到暂存区，然后再一次性git commit提交到当前分支。</p><blockquote><ol start="4"><li>版本回退</li></ol></blockquote><p>git文件修改之后可以通过commit来保存一个快照。后面如果想回退就有了依据。可以通过git log命令查看自己每次commit的记录。<code>git log --pretty=oneline</code>减少输出的信息。<br>用HEAD是指向当前版本的指针，上一个版本就是HEAD^，上上一个版本就是HEAD^^。</p><p>版本回退就是用<code>git reset</code>, 回退到上个版本<code>git reset --hard HEAD~</code> 如果知道commit版本号id前几位，也可以直接<code>git reset --hard 1011a</code></p><p><code>git reflog</code>用来查看命令历史，以便确定要回到未来哪个版本。</p><blockquote><ol start="5"><li>discard changes</li></ol></blockquote><p><code>git checkout -- file.txt</code>丢掉工作区文件修改。如果没有添加– 那就是直接切换分支了</p><p><code>git reset HEAD file.txt</code>如果工作区的文件修改已经提交到暂存区，使用这个命令也可以把暂存区的修改撤销掉（unstage）<br>最简单的还是使用可视化工具来操作。</p><p>删除文件用<code>git rm file.txt</code>,删除之后不是git add，是直接<code>git commit</code>添加到暂存区了。删除文件之后如果想要回退上没有删除之前，也可以使用 <code>git checkout -- delete.txt</code>;git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都是直接还原。</p><blockquote><ol start="6"><li>远程分支相关</li></ol></blockquote><blockquote><p>为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p></blockquote><p>当然，GitHub允许你添加多个Key。只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。</p><p>常见与远程操作相关的是：1，从远程克隆；2，把本地的代码添加到远程仓库。</p><p>克隆就直接是<code>git clone git@github.com:sb/something.git</code></p><p>假如我们知道远程仓库的地址，怎么把本地仓与远程的关联？</p><p>在本地执行<code>$ git remote add origin git@github.com:sb/something.git</code></p><blockquote><ol start="7"><li>分支管理</li></ol></blockquote><p>To be continued</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端开发，安卓机软键盘弹出的bug</title>
      <link href="/input-keyboard.html"/>
      <url>/input-keyboard.html</url>
      
        <content type="html"><![CDATA[<p>这个问题以前也出现过，页面上有一个弹出的表单效果，让用户留下手机号，用户名等。当时的解决方法就是不给整个弹出框设置高度。<br>而今天这个情况因为有背景图，所以必须要定高度了。定了高度，安卓机软键盘一弹出来，就占了页面屏幕的高度，这就导致弹出框等被压缩。</p><p>解决方法:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'body'</span>).height($(<span class="string">'body'</span>)[<span class="number">0</span>].clientHeight);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>iphone上面没有这个问题，好像是因为iphone上面分层不同么？？？（待补习）<br>但是iphone上另外一个问题就是，输入框聚焦时候，iphone弹出的软键盘会遮住，必须手动向下滑动一下才可以。<br>解决方法;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">document</span>.body.scrollTop = <span class="built_in">document</span>.body.scrollHeight;</span><br><span class="line">&#125;,<span class="number">300</span>);</span><br></pre></td></tr></table></figure><p>今天才晓得苹果上alert不出来，，，晕。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Bug </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css3实现打字效果</title>
      <link href="/css-typing-animation.html"/>
      <url>/css-typing-animation.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>如何使用css3实现打字效果</p></blockquote><blockquote><p>关键的就是通过keyframes + animation来控制宽度的显示，运用到了steps，step传的参数等于字符串的长度。注意要设置成不换行。</p></blockquote><blockquote><p>光标效果是如何实现的，直接通过border,然后光标在背景色与透明直接来回切换就ok了。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.typewriter</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">font-family</span>:Helvetica, Arial, sans-serif;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">border-right</span>: .<span class="number">15em</span> solid orange;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">140px</span> auto;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: .<span class="number">15em</span>;</span><br><span class="line">  <span class="attribute">animation</span>: typing <span class="number">3.5s</span> <span class="built_in">steps</span>(24), blink-caret .<span class="number">5s</span> infinite alternate;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> typing &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123; <span class="attribute">width</span>: <span class="number">0</span> &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123; <span class="attribute">width</span>: <span class="number">100%</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> blink-caret &#123;</span><br><span class="line">  <span class="selector-tag">from</span>, <span class="selector-tag">to</span> &#123; <span class="attribute">border-color</span>: transparent &#125;</span><br><span class="line">  50% &#123; <span class="attribute">border-color</span>: orange &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Async JS - Ajax,Callback,Promise,Async,Await的不同实现</title>
      <link href="/async-javascript.html"/>
      <url>/async-javascript.html</url>
      
        <content type="html"><![CDATA[<p>整理一下异步js相关的知识。异步js的实现形式。</p><blockquote><p>ajax</p></blockquote><p>ajax就是async javascript and xml. js本身是单线程同步语言，但是web上很多都是异步发送请求，然后拿到数据渲染到dom，但是我们不可能一直等请求结束才执行页面上的其他操作。所以ajax就应用而生了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">http.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(http.readyState == <span class="number">4</span> &amp;&amp; http.status == <span class="number">200</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(http.response))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">http.open(<span class="string">'GET'</span>,<span class="string">'data/animals.json'</span>,<span class="literal">true</span>);</span><br><span class="line">http.send();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'test'</span>)</span><br></pre></td></tr></table></figure><p>上头的例子会先打印test,然后再console http.response，是因为http请求是异步的，设置成了true</p><blockquote><p>callback</p></blockquote><p>比如需求是在function a完成之后才去执行b,b之后才去执行c,这种情况下就用到callback;</p><p>下面是一段ugly code。。。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                type: <span class="string">'GET'</span>,</span><br><span class="line">                url: <span class="string">'data/animals.json'</span>,</span><br><span class="line">                success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(res)</span><br><span class="line">                    $.ajax(&#123;</span><br><span class="line">                        type: <span class="string">'GET'</span>,</span><br><span class="line">                        url: <span class="string">'data/students.json'</span>,</span><br><span class="line">                        success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">                            <span class="built_in">console</span>.log(res)</span><br><span class="line">                            $.ajax(&#123;</span><br><span class="line">                                type: <span class="string">'GET'</span>,</span><br><span class="line">                                url: <span class="string">'data/post.json'</span>,</span><br><span class="line">                                success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">                                    <span class="built_in">console</span>.log(res)</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> posts = [</span><br><span class="line">            &#123;</span><br><span class="line">                title: <span class="string">'post One'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                title: <span class="string">'post two'</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getPosts</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> output = <span class="string">''</span>;</span><br><span class="line">                posts.forEach(<span class="function">(<span class="params">post,index</span>) =&gt;</span> &#123;</span><br><span class="line">                    output += <span class="string">`&lt;li&gt;<span class="subst">$&#123;post.title&#125;</span>&lt;/li&gt;`</span></span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="built_in">document</span>.body.innerHTML = output;</span><br><span class="line">            &#125;,<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">newPost</span>(<span class="params">post</span>)</span>&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                posts.push(post)</span><br><span class="line">            &#125;,<span class="number">2000</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        getPosts();</span><br><span class="line">        newPost(&#123;<span class="attr">title</span>: <span class="string">'post three'</span>&#125;)</span><br><span class="line"><span class="comment">//这种情况下，post three并不会被添加到dom上面</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过回调的方式修改上面的代码</span></span><br><span class="line"><span class="keyword">let</span> posts = [</span><br><span class="line">            &#123;</span><br><span class="line">                title: <span class="string">'post One'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                title: <span class="string">'post two'</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">renderPosts</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> output = <span class="string">''</span>;</span><br><span class="line">                posts.forEach(<span class="function">(<span class="params">post,index</span>) =&gt;</span> &#123;</span><br><span class="line">                    output += <span class="string">`&lt;li&gt;<span class="subst">$&#123;post.title&#125;</span>&lt;/li&gt;`</span></span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="built_in">document</span>.body.innerHTML = output;</span><br><span class="line">            &#125;,<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">newPost</span>(<span class="params">post,callback</span>)</span>&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                posts.push(post)</span><br><span class="line">                callback();</span><br><span class="line">            &#125;,<span class="number">2000</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        newPost(&#123;<span class="attr">title</span>: <span class="string">'post three'</span>&#125;,renderPosts)</span><br></pre></td></tr></table></figure><blockquote><p>Promise</p></blockquote><p>大量的回调看着实在是难受，promise就是解决这一问题，让代码看着更优雅。个人感觉有点类似jquery的chain链式操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> posts = [&#123;</span><br><span class="line">                title: <span class="string">'post One'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                title: <span class="string">'post two'</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">renderPosts</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> output = <span class="string">''</span>;</span><br><span class="line">                posts.forEach(<span class="function">(<span class="params">post, index</span>) =&gt;</span> &#123;</span><br><span class="line">                    output += <span class="string">`&lt;li&gt;<span class="subst">$&#123;post.title&#125;</span>&lt;/li&gt;`</span></span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="built_in">document</span>.body.innerHTML = output;</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">newPost</span>(<span class="params">post, callback</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">                setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    posts.push(post);</span><br><span class="line">                    resolve()</span><br><span class="line">                &#125;,<span class="number">2000</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        newPost(&#123;<span class="attr">title</span>:<span class="string">'post three'</span>&#125;).then(renderPosts)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//newPost返回一个promise对象，只有再执行完了push post3的操作之后，才去渲染dom</span></span><br></pre></td></tr></table></figure><blockquote><p>Async await es7 让代码更优雅</p></blockquote><p>async await可以用看起来是同步代码的方式来写异步。还是同一个案例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> posts = [&#123;</span><br><span class="line">                title: <span class="string">'post One'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                title: <span class="string">'post two'</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">renderPosts</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> output = <span class="string">''</span>;</span><br><span class="line">                posts.forEach(<span class="function">(<span class="params">post, index</span>) =&gt;</span> &#123;</span><br><span class="line">                    output += <span class="string">`&lt;li&gt;<span class="subst">$&#123;post.title&#125;</span>&lt;/li&gt;`</span></span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="built_in">document</span>.body.innerHTML = output;</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">newPost</span>(<span class="params">post, callback</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">                setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    posts.push(post);</span><br><span class="line">                    resolve()</span><br><span class="line">                &#125;,<span class="number">2000</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">await</span> newPost(&#123;<span class="attr">title</span>: <span class="string">'post three'</span>&#125;)</span><br><span class="line">            renderPosts();</span><br><span class="line">        &#125;</span><br><span class="line">        init();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>scss mixin 总结</title>
      <link href="/scss-mixin.html"/>
      <url>/scss-mixin.html</url>
      
        <content type="html"><![CDATA[<p>mixin可以方便我们复用代码。可以把它理解成js中的函数，把相同功能的代码放在一起，可以传递参数。</p><p>整理一下常见的scss mixin;</p><blockquote><p>1px-border</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> border-1px(<span class="variable">$color</span>) &#123;</span><br><span class="line">  <span class="selector-class">.border-1px</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    &amp;:after &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">right</span>: auto;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="variable">$color</span>;</span><br><span class="line">      <span class="attribute">display</span>: block;</span><br><span class="line">      <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">      -webkit-<span class="attribute">transform-origin</span>: <span class="number">50%</span> <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">transform-origin</span>: <span class="number">50%</span> <span class="number">0</span>;</span><br><span class="line">      -webkit-<span class="attribute">transform</span>: scaleY(<span class="number">0.5</span>);</span><br><span class="line">      <span class="attribute">transform</span>: scaleY(<span class="number">0.5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后续优化：可以根据device-pixel-ratio来判断是否scaleY(0.5);</p><blockquote><p>单行文本溢出</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> single-ellipsis &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  -ms-<span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>多行文本溢出</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> double-ellipsis &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  -webkit-box-orient: vertical;</span><br><span class="line">  -webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>media(左图右文本布局)</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> media(<span class="variable">$imgWidth</span>,<span class="variable">$imgHeight</span>,<span class="variable">$gap</span>)&#123;</span><br><span class="line">    <span class="selector-class">.media</span> &#123;</span><br><span class="line">        &amp;__imgwrapper &#123;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">            <span class="attribute">width</span>: <span class="variable">$imgWidth</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="variable">$imgHeight</span>;</span><br><span class="line">            &amp; &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">                <span class="attribute">display</span>: block;</span><br><span class="line">                <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            &amp; &gt; <span class="selector-tag">img</span> &#123;</span><br><span class="line">                <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &amp;__content &#123;</span><br><span class="line">            <span class="attribute">padding-left</span>: <span class="variable">$imgWidth</span> + <span class="variable">$gap</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>flag (常用语移动端，兼容性优于flexbox)</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> flag(<span class="variable">$gap</span>:<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="selector-class">.flag</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: table;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="selector-tag">img</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        @<span class="keyword">for</span> <span class="variable">$i</span> from 1 to 100 &#123;</span><br><span class="line">            <span class="selector-class">.flag__item--width</span>#&#123;<span class="variable">$i</span>&#125;&#123;</span><br><span class="line">                <span class="attribute">width</span>: #&#123;<span class="variable">$i</span>+<span class="string">'%'</span>&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &amp;__item &#123;</span><br><span class="line">            <span class="attribute">display</span>: table-cell;</span><br><span class="line">            &amp;--middle &#123;</span><br><span class="line">                <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">            &#125;</span><br><span class="line">            &amp;--<span class="attribute">top</span> &#123;</span><br><span class="line">                <span class="attribute">vertical-align</span>: top;</span><br><span class="line">            &#125;</span><br><span class="line">            &amp;--<span class="attribute">bottom</span> &#123;</span><br><span class="line">                <span class="attribute">vertical-align</span>: bottom;</span><br><span class="line">            &#125;</span><br><span class="line">            &amp;--yellow &#123;</span><br><span class="line">                <span class="attribute">background-color</span>: <span class="number">#e4ad5a</span>;</span><br><span class="line">                <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            &amp;--disabled &#123;</span><br><span class="line">                <span class="attribute">position</span>: relative;</span><br><span class="line">                <span class="selector-class">.mask</span> &#123;</span><br><span class="line">                    <span class="attribute">position</span>: absolute;</span><br><span class="line">                    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">                    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">                    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">                    <span class="attribute">background</span>: rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &amp;__item + &amp;__item &#123;</span><br><span class="line">            <span class="attribute">padding-left</span>: <span class="variable">$gap</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>float(pc端左右布局)</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> float()&#123;</span><br><span class="line">    <span class="selector-tag">div</span> &#123;</span><br><span class="line">        &amp;<span class="selector-class">.clearfix</span>&#123;</span><br><span class="line">            &amp;:after &#123;</span><br><span class="line">                <span class="attribute">display</span>: table;</span><br><span class="line">                <span class="attribute">content</span>:<span class="string">''</span>;</span><br><span class="line">                <span class="attribute">overflow</span>: hidden;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &amp;<span class="selector-class">.left</span>&#123;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">        &#125;</span><br><span class="line">        &amp;<span class="selector-class">.right</span> &#123;</span><br><span class="line">            <span class="attribute">float</span>: right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>pc端居中容器</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> container(<span class="variable">$width</span>)&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$width</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>card (卡片式样式)</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> card(<span class="variable">$padding</span>,<span class="variable">$bgc</span>:<span class="number">#fff</span>)&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="variable">$padding</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$bgc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>button按钮样式</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> button(<span class="variable">$width</span>,<span class="variable">$height</span>,<span class="variable">$bgc</span>,<span class="variable">$color</span>,<span class="variable">$fontsize</span>,<span class="variable">$border-radius</span>:<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="variable">$width</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="variable">$height</span>;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="variable">$height</span>;</span><br><span class="line">        <span class="attribute">text-align</span>: center;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="variable">$bgc</span>;</span><br><span class="line">        <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="variable">$fontsize</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="variable">$border-radius</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//button mixin的引用</span></span><br><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">    &amp;-red-<span class="selector-tag">big</span> &#123;</span><br><span class="line">        @<span class="keyword">include</span> button(<span class="number">100%</span>,<span class="number">40px</span>,<span class="variable">$color-red</span>,<span class="number">#fff</span>,<span class="number">14px</span>,<span class="number">4px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;-grey-middle &#123;</span><br><span class="line">        @<span class="keyword">include</span> button(<span class="number">100px</span>,<span class="number">40px</span>,<span class="variable">$color-grey</span>,<span class="number">#fff</span>,<span class="number">14px</span>,<span class="number">4px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>border</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> border(<span class="variable">$size</span>,<span class="variable">$type</span>,<span class="variable">$bgc</span>,<span class="variable">$direction</span>)&#123;</span><br><span class="line">    @<span class="keyword">if</span> <span class="variable">$direction</span> == <span class="string">'all'</span>&#123;</span><br><span class="line">        <span class="attribute">border</span>: <span class="variable">$size</span> <span class="variable">$type</span> <span class="variable">$bgc</span>;</span><br><span class="line">    &#125;@<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="attribute">border</span>-#&#123;<span class="variable">$direction</span>&#125;: <span class="variable">$size</span> <span class="variable">$type</span> <span class="variable">$bgc</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>box 盒子模型定宽高</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@mixin box($width,$height)&#123;</span><br><span class="line">    width: $width;</span><br><span class="line">    height: $height;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SASS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SASS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nginx反向代理解决前端跨域问题</title>
      <link href="/nignx-setup.html"/>
      <url>/nignx-setup.html</url>
      
        <content type="html"><![CDATA[<h3 id="nginx反向代理解决前端跨域问题"><a href="#nginx反向代理解决前端跨域问题" class="headerlink" title="nginx反向代理解决前端跨域问题"></a>nginx反向代理解决前端跨域问题</h3><p>记一次nginx反向代理。情景：本地访问原公司接口结果跨域，无法写demo。解决：通过nginx在本地起服务（上线之后应该也差不多），然后通过nginx服务代理转发请求到目标服务器，解决浏览器跨域问题。</p><p>其实很简单，没有想象中难。</p><p>配置文件如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">server</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">listen</span>       <span class="number">80</span><span class="string">;</span></span><br><span class="line">        <span class="string">server_name</span>  <span class="string">localhost;</span></span><br><span class="line">        <span class="string">location</span> <span class="string">/</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="string">root</span>   <span class="attr">C:\Users\Janey\path\...;</span></span><br><span class="line">            <span class="string">index</span>  <span class="string">index.html</span> <span class="string">index.htm;</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line">        <span class="string">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  <span class="string">/50x.html;</span></span><br><span class="line">        <span class="string">location</span> <span class="string">=</span> <span class="string">/50x.html</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="string">root</span>   <span class="string">html;</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line">        <span class="string">location</span> <span class="string">^~</span> <span class="string">/api/</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="string">proxy_pass</span> <span class="attr">https://api.test.xxxx.com;</span>  <span class="comment">#注意域名后有一个/</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>启动和停止服务用到的命令:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">nginx</span> <span class="bullet">-s</span> <span class="string">stop</span><span class="string">fast</span> <span class="string">shutdown</span></span><br><span class="line"><span class="string">nginx</span> <span class="bullet">-s</span> <span class="string">quit</span><span class="string">graceful</span> <span class="string">shutdown</span></span><br><span class="line"><span class="string">nginx</span> <span class="bullet">-s</span> <span class="string">reload</span><span class="string">changing</span> <span class="string">configuration,</span> <span class="string">starting</span> <span class="string">new</span> <span class="string">worker</span> <span class="string">processes</span> <span class="string">with</span> <span class="string">a</span> <span class="string">new</span> <span class="string">configuration,</span> <span class="string">graceful</span> <span class="string">shutdown</span> <span class="string">of</span> <span class="string">old</span> <span class="string">worker</span> <span class="string">processes</span></span><br><span class="line"><span class="string">nginx</span> <span class="bullet">-s</span> <span class="string">reopen</span><span class="string">re-opening</span> <span class="string">log</span> <span class="string">files</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Vue生命周期</title>
      <link href="/vue-timeline.html"/>
      <url>/vue-timeline.html</url>
      
        <content type="html"><![CDATA[<p>###Vue生命周期</p><p>自己用vue写幻灯片的时候遇到一个问题就是，幻灯片初始化等样式，分页都不正确。<br>后来意识到是因为sldier.vue这个组件里面的初始化是在mounted里面，而引用slider的site.vue页面获取数据则是在created里面，是一个异步请求。数据的请求是需要时间的，可能data和dom都没有准备好，初始化操作就已经结束了。</p><p>为了解决这个问题，在site.vue这个父组件里面判断了v-if,只有幻灯片获取到数据之后，才去渲染dom。</p><p>vue组件生命周期，感觉自己模模糊糊的知道，但是具体的比如updated, activated这些经常弄混淆。复习一下。</p><blockquote><p>vue组件声明周期：</p></blockquote><blockquote><p>beforeCrated</p></blockquote><p>在实例初始化之后，数据观测和event/watcher时间配置之前被调用。</p><blockquote><p>created</p></blockquote><p>实例已经创建完成之后被调用。在这一步，实例已经完成以下的配置：数据观测，属性和方法的运算，</p><blockquote><p>beforeMount</p></blockquote><p>在挂载开始之前被调用：相关的render函数首次被调用。该钩子在服务器端渲染期间不被调用。</p><blockquote><p>mounted</p></blockquote><p>el被新创建的vm.$el替换，并挂在到实例上去之后调用该钩子函数。如果root实例挂载了一个文档内元素，当mounted被调用时vm.$el也在文档内。</p><blockquote><p>beforeUpdate</p></blockquote><p>数据更新时调用，发生在虚拟DOM重新渲染和打补丁之前。可以在这个钩子中进一步第更改状态，这不会触发附加的重渲染过程。</p><blockquote><p>updated</p></blockquote><p>由于数据更改导致的虚拟DOM重新渲染和打补丁，在这之后会调用该钩子。当这个钩子被调用时，组件DOM已经更新，所以你现在可以执行依赖于DOM的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。</p><blockquote><p>activate</p></blockquote><p>keep-alive组件激活时调用。</p><blockquote><p>deactivated</p></blockquote><p>keep-alive组件停用时调用。</p><blockquote><p>beforeDestory</p></blockquote><p>实例销毁之间调用。在这一步，实例仍然完全可用。</p><blockquote><p>destroyed</p></blockquote><p>Vue实例销毁后调用。调用后，Vue实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</p><p><img src="https://images2015.cnblogs.com/blog/976007/201704/976007-20170417142235134-338256909.png" alt="vue"></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>canvas案例一</title>
      <link href="/canvas1.html"/>
      <url>/canvas1.html</url>
      
        <content type="html"><![CDATA[<h3 id="canvas生成一个snowy-background"><a href="#canvas生成一个snowy-background" class="headerlink" title="canvas生成一个snowy background"></a>canvas生成一个snowy background</h3><blockquote><p>1.html里面写canvas标签，通过js获取并调用api控制</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span><br><span class="line"><span class="keyword">var</span> cc = c.getContext(<span class="string">'2d'</span>);</span><br><span class="line"><span class="comment">//把canvas的宽高设置成屏幕上一样</span></span><br><span class="line">c.height = innerHeight;</span><br><span class="line">c.width = innerWidth;</span><br></pre></td></tr></table></figure><blockquote><p>2.定义flakes数组，其中每一个都是flake实例，有x,y,radius,d属性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flakes = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; maxFlakes;i++)&#123;</span><br><span class="line">    flakes.push(&#123;</span><br><span class="line">        x: <span class="built_in">Math</span>.random() * innerWidth,</span><br><span class="line">        y: <span class="built_in">Math</span>.random() * innerHeight,</span><br><span class="line">        r: <span class="built_in">Math</span>.random() * <span class="number">5</span> + <span class="number">2</span>, <span class="comment">// min of 2px, max of 7px;</span></span><br><span class="line">        d: <span class="built_in">Math</span>.random() + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3.绘制数组中的每一项，生成雪花</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawFlake</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    cc.clearRect(<span class="number">0</span>,<span class="number">0</span>,innerWidth,innerHeight);</span><br><span class="line">    cc.fillStyle = <span class="string">'white'</span>;</span><br><span class="line">    cc.beginPath();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; maxFlakes;i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> f = flakes[i];</span><br><span class="line">        cc.moveTo(f.x,f.y);</span><br><span class="line">        cc.arc(f.x,f.y,f.r,<span class="number">0</span>,<span class="built_in">Math</span>.PI * <span class="number">2</span>,<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cc.fill();</span><br><span class="line">    moveFlake();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li>绘制雪花之后要让它动起来</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> angle = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">moveFlake</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    angle += <span class="number">0.01</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; maxFlakes;i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> f = flakes[i];</span><br><span class="line"></span><br><span class="line">        f.x += <span class="built_in">Math</span>.sin(angle) * <span class="number">2</span>;</span><br><span class="line">        f.y += <span class="built_in">Math</span>.pow(f.d,<span class="number">2</span>) * <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(f.y &gt; innerHeight)&#123;</span><br><span class="line">            flakes[i] = &#123;</span><br><span class="line">                x: <span class="built_in">Math</span>.random() * innerWidth,</span><br><span class="line">                y: <span class="number">0</span>,</span><br><span class="line">                r: f.r,</span><br><span class="line">                d: f.d</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="5"><li>animate it</li></ol></blockquote><p>要让雪花定时动起来，可以通过setInterval, setTimeout,或者requestAnimation来实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> angle = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">moveFlake</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    angle += <span class="number">0.01</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; maxFlakes;i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> f = flakes[i];</span><br><span class="line"></span><br><span class="line">        f.x += <span class="built_in">Math</span>.sin(angle) * <span class="number">2</span>;</span><br><span class="line">        f.y += <span class="built_in">Math</span>.pow(f.d,<span class="number">2</span>) * <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(f.y &gt; innerHeight)&#123;</span><br><span class="line">            flakes[i] = &#123;</span><br><span class="line">                x: <span class="built_in">Math</span>.random() * innerWidth,</span><br><span class="line">                y: <span class="number">0</span>,</span><br><span class="line">                r: f.r,</span><br><span class="line">                d: f.d</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">setInterval(drawFlake,<span class="number">20</span>);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> canvas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浏览器工作原理一</title>
      <link href="/web-performance-how-browser-works.html"/>
      <url>/web-performance-how-browser-works.html</url>
      
        <content type="html"><![CDATA[<p>最近看了个youtube教程，虽然有点老，但是感觉重点挺突出的嘛。<br><a href="https://www.youtube.com/watch?v=PkOBnYxqj3k&amp;t=450s" target="_blank" rel="noopener">https://www.youtube.com/watch?v=PkOBnYxqj3k&amp;t=450s</a></p><blockquote><p>当我们在浏览器输入url的时候发生了什么？</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/2301467-17c1efb49eabde7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/193" alt="timeline"></p><p>浏览器主要由这7部分组成：</p><p><img src="https://upload-images.jianshu.io/upload_images/2301467-912fc463d89b5e81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/583" alt="components"></p><p>User Interface</p><ul><li>定义了一些常用的浏览器插件</li></ul><p>Browser engine</p><ul><li>平台应用的相关借口，在用户界面和呈现引擎之间传送指令</li></ul><p>Rendering engine</p><ul><li>处理HTML 和 CSS 的解析与渲染</li></ul><p>Networking</p><ul><li>处理网络请求</li></ul><p>JavaScript Interpreter</p><ul><li>解析和执行JS 代码</li></ul><p>UI Backend</p><ul><li>绘制基础元件，如组合框与窗口。它提供平台无关的接口，内部使用操作系统的相应实现</li></ul><p>Data Persistence</p><ul><li>类似cookie</li></ul><p>浏览器的渲染过程：</p><p><img src="https://upload-images.jianshu.io/upload_images/2301467-2577252d71f12846.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/677" alt="process"></p><blockquote><p>html解析</p></blockquote><p>parse html and generate dom (解析html,生成dom)<br>HTML字节流解码变为字符流。词法分析：将字符流解析为一个个词语。语法分析：通过不同标签，生成node节点。构建DOM树：将node节点组织成DOM树</p><p>（这句话是在不知道怎么翻译，我懂就行了，哎）DOM is constructed incrementally as the bytes arrive on the wire. html is parsed incrementally.</p><p>html解析的特点是并发加载；html引入css的加载是并发的，非阻塞式的，html词法分析时token的获取是从上到下，所以解析也是从上到下。</p><blockquote><p>css解析</p></blockquote><p>在解析html发现了link标签，于是获取css样式表。与html这种incrementally的解析不同，css会阻塞页面渲染，因为css会使得一个元素在页面上show或者hide,只有都加载完了，才会生成CSSOM。<br>而DOM + CSSOM = render tree. 只有dom和cssom都完成了才会有render tree，页面上才会渲染。因为比如css里面添加一条规则某个div display:none,那么这个节点是不会出现在render tree上面的。<br>这也解析了为什么要把css写在head里面，尽早渲染。</p><p>css不会阻塞外部资源加载，比如js。也就是说获取css的时候也可以并发去加载js,但会阻塞js执行；为什么？因为js会去操作dom，这个基础是基于css引入样式的基础上进行。</p><p>js特点：</p><p>1，直接引入的js（没有添加defer, async）的会阻塞页面渲染；因为js会调用document.write等这种修改文档结构，所以会阻塞；所以文档结构的分析和渲染要等到js执行完之后才执行。<br>2，js不阻塞资源加载；<br>3，js顺序执行，阻塞后续js代码执行。(js执行是单线程的)</p><p>不阻塞外部资源加载是因为浏览器预先扫描器，webkit-preloader, </p><p>总之，html + css解析，分别生成dom + cssom, 这两者ok之后生成render tree,页面上才开始渲染（在这之前页面都是白屏），接下来是layout —&gt; paint</p>]]></content>
      
      
      <categories>
          
          <category> Website Performance </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Website Performance </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端性能优化整理之 DNS prefetch</title>
      <link href="/web-performance-1.html"/>
      <url>/web-performance-1.html</url>
      
        <content type="html"><![CDATA[<p>深入理解http请求的过程是前端性能优化的核心；那么用户在浏览器里面输入url的时候到底发生了什么？<br>首先是拿到domain，通过dsn server解析匹配该域名对应的ip地址，向该ip所对应的服务器发送请求。<br>这个解析域名是需要花时间的。</p><p>那么前端性能优化的第一个点就来了，DNS Prefetch，即DNS 预解析技术，dns预解析是与页面加载是并行处理的，且不用影响到页面加载的性能。浏览器会在加载网页时对网页中的域名进行解析缓存，这样就无需进行DNS的解析，减少用户等待时间。打开京东，天猫，发现都做了dns prefetch这个优化。<br>(图片来自网络)</p><p><img src="https://cdn.www.sojson.com/file/17-03-28-22-35-36/doc/5187353214" alt="dns prefetch"></p><p>看到这张图片，也有疑问，为什么要用这么多cdn来做图片，静态资源的存放呢？因为解析单个域名，发送并发请求或者css,img,js等文件时候是有限的，高并发就会阻塞。多个cdn就能很好的解决这一问题。</p>]]></content>
      
      
      <categories>
          
          <category> Website Performance </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Website Performance </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>http,tcp</title>
      <link href="/http-1.html"/>
      <url>/http-1.html</url>
      
        <content type="html"><![CDATA[<p>当我们在浏览器地址栏输入url,发生了什么???</p><blockquote><p>deep understanding of url</p></blockquote><p>URL（Universal Resource Locator）：统一资源定位符,也就是网址。也就是某个资源的地址。<br>一个url一般由传输协议，域名，端口，文件名，参数来组成。<br>比如：<a href="https://www.google.com/search?newwindow=1&amp;source=hp" target="_blank" rel="noopener">https://www.google.com/search?newwindow=1&amp;source=hp</a>  其中https是协议，<a href="http://www.google.com域名，默认端口80，文件名search,参数" target="_blank" rel="noopener">www.google.com域名，默认端口80，文件名search,参数</a> newwindow, source</p><blockquote><p>what is http ? </p></blockquote><p>计算机与网络设备要通信，就要基于一定的方法或者规则。而客户服和服务端是基于http协议来进行通信。HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写。</p><blockquote><p>DNS</p></blockquote><p>IP地址太难记住了，所以就有了域名。当我们在浏览器输入url域名，DNS域名解析会根据url找到对应的服务器ip，向对应服务器发送请求。</p><p>在进行DNS解析的步骤：<br>查询浏览器缓存（浏览器会缓存之前拿到的DNS），如果没有找到，<br>检查系统缓存，检查hosts文件，这个文件保存了一些以前访问过的网站的域名和IP的数据。它就像是一个本地的数据库。如果找到就可以直接获取目标主机的IP地址了。如果没有<br>检查路由器缓存，路由器有自己的DNS缓存，可能就包括了这在查询的内容；如果没有，要<br>查询ISP DNS 缓存：ISP服务商DNS缓存（本地服务器缓存）那里可能有相关的内容，如果还不行的话，<br>递归查询：从根域名服务器到顶级域名服务器再到极限域名服务器依次搜索哦对应目标域名的IP。</p><blockquote><p>TCP</p></blockquote><p>在输入url，解析了拿到ip之后，应该向服务器发送request。在客服端向服务端发送请求的时候，需要创建一个tcp connection. 因为http是只有请求和响应，没有连接；<br>请求和响应都是数据包，中间需要通过一个传输通道，这就是建立tcp链接。</p><p>tpc链接的三次握手：<br>第一次握手：客户端向服务器端发送请求（SYN=1） 等待服务器确认；<br>第二次握手：服务器收到请求并确认，回复一个指令（SYN=1，ACK=1）；<br>第三次握手：客户端收到服务器的回复指令并返回确认（ACK=1）。</p><p>通过三次握手，确认客户端和服务器之间的连接，接下来进行数据的传输了。</p><p>Data were divided into small packets.</p><p>在http协议的早期版本，当本次请求需要的数据完毕后，TCP连接会断开，所以Http连接是一种短连接，也是一种无状态的连接。是指浏览器每次向服务器发起请求的时候，不是通过一个连接，而是每次都建立一个新的连接。如果是一个连接的话，服务器进程中就能保持住这个连接并且在内存中记住一些信息状态。而每次请求结束后，连接就关闭，相关的内容就释放了，所以记不住任何状态。(cookie等就产生了)</p><p>从HTTP/1.1起，默认都开启了Keep-Alive。因为tcp的三次握手，加入每次请求一张图片就要断开以及重新建立一次链接，是有成本的。</p><p>keep-alive的作用在于，当一个网页打开，TCP连接不会关闭，客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，（set by the server）。</p><blockquote><p>TCP的分层：</p></blockquote><h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p>决定像用户提供应用服务时通信的活动。比如ftp, http, dns等</p><h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><p>处于网络链接中两台计算机的数据传输。有两个不同的协议，TCP和UDP</p><h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><p>处理在网络上流动的数据包，packet. 改成决定了通过什么样的路径到达对方计算机，并把数据包发给对方。IP协议</p><h3 id="链路层"><a href="#链路层" class="headerlink" title="链路层"></a>链路层</h3><p>用来处理网络的硬件部分。</p><p>To be finished.</p>]]></content>
      
      
      <categories>
          
          <category> http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js浅拷贝深拷贝</title>
      <link href="/shallow-copy-deep-copy.html"/>
      <url>/shallow-copy-deep-copy.html</url>
      
        <content type="html"><![CDATA[<blockquote><p> 1.基础类型值和引用类型值？</p></blockquote><p>基础类型值主要是string, number, null, undefined, boolean,这里不考虑es6<br>引用类型值主要是Object, Array复杂类型的数据。<br>当我们在复制值的时候存在两种情况，一种是copy by value(基础类型值),还是就是copy by reference（引用类型值）。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子一</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line">a = <span class="number">21</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a,b)   =。  <span class="number">21</span>， <span class="number">20</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;<span class="attr">name</span>: <span class="string">'Jane'</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line">a = &#123;<span class="attr">name</span>: <span class="string">'Tony'</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a,b);   =&gt; &#123; <span class="attr">name</span>: <span class="string">'Tony'</span> &#125; &#123; <span class="attr">name</span>: <span class="string">'Jane'</span> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子三</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;<span class="attr">name</span>: <span class="string">'Jane'</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line">a.name = <span class="string">'Tony'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a,b);   =&gt; &#123; <span class="attr">name</span>: <span class="string">'Tony'</span> &#125; &#123; <span class="attr">name</span>: <span class="string">'Tony'</span> &#125;</span><br></pre></td></tr></table></figure><p>在例子三中我们看到当我们改变a的name时候，b也被改变了。这是为什呢呢？<br>因为基础类型的复制相当于在内存中新分配位置，所以例子一中，一开始让b等于a,但是后面修改a的时候不影响b,因为a和b在栈内存中分配了完全不同的位置，所以互不影响。<br>但是复制引用类型的时候，复制的是引用（指针），它指向同一个对象，所以案例三中 let b = a; 修改a,b也发生了变化，因为a和b的指向同一个对象。</p><p>为什么基础类型和引用类型复制的时候表现不一样呢？</p><blockquote><p> 2.数据类型在内存中的分配</p></blockquote><p>基础类型的数据是保存在栈内存中，而引用类型则保存在堆内存中。这是因为，基础类型值大小固定，而引用类型值是不固定的，所以引用类型只能保存在堆内存中，基础类型保存在栈内存中。<br>但是保存在堆内存中的可以把它的地址写在栈内存中，方便我们引用访问。</p><p>正式因为这一原因，当我们操作数据的时候，基本类型的值是按值访问，操作的是实际在栈内存中的值。而引用类型的值，我们是通过操作栈内存中的引用，实际上是修改其在堆内存中的实际值。</p><blockquote><p>3.如何复制引用类型的值，互不影响？</p></blockquote><p>分析了例子三，再来看下，如何实现引用类型的复制呢？直接 = 赋值肯定不行了。<br>常用的方法有slice, spread operator,concat,Object.assign()等<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一： </span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> b = a.slice(<span class="number">0</span>);</span><br><span class="line">a.push(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a,b)     =&gt; [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ] [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法二：</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> b = [...a];</span><br><span class="line">a.push(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a,b)     =&gt; [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ] [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法三：</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> b = a.concat();</span><br><span class="line">a.push(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a,b)   =&gt; [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ] [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法四：</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">Object</span>.assign([],a);</span><br><span class="line">a.push(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a,b)   =&gt; [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ] [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj =&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:[<span class="number">1</span>,<span class="number">2</span>]&#125;;</span><br><span class="line">    <span class="keyword">var</span> shallowCopy = shallow(obj);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">shallow</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> shallowObj = &#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> name <span class="keyword">in</span> obj)&#123;</span><br><span class="line">            <span class="keyword">if</span>(obj.hasOwnProperty(name))&#123;</span><br><span class="line">                shallowObj[name] = obj[name]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> shallowObj</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这些方法满足基本的需求，以上这种复制只复制了第一层属性，我们赋值的对象里面的value都是基本类型值。如果是key对应的value是对象或者数组呢？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [[<span class="string">'Jane'</span>],<span class="number">20</span>];</span><br><span class="line"><span class="keyword">let</span> b = a.concat();</span><br><span class="line">a[<span class="number">0</span>][<span class="number">0</span>] = <span class="string">'Tony'</span>;</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">21</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a,b);    =&gt; [ [ <span class="string">'Tony'</span> ], <span class="number">21</span> ] [ [ <span class="string">'Tony'</span> ], <span class="number">20</span> ]</span><br></pre></td></tr></table></figure></p><p>在上面这个二维数组中,我们改变a的第二项并没有影响到b,但是为什么第一项数组却被修改了呢？<br>这时候就引出了基本类型值和引用类型值的区别了。因为以上的方法都是浅复制</p><blockquote><p>4，浅拷贝和深拷贝(deep copy and shallow copy)</p></blockquote><p>浅复制：只会将对象的各个属性进行依次复制，并不会进行递归复制<br>深复制：它不仅将原对象的各个属性逐个复制出去，而且将原对象各个属性所包含的对象也依次采用深复制的方法递归复制到新对象上。</p><p>这里一个方法就是JSON.parse,  JSON.stringify,和jq的 $.extend，<br>用JSON.stringify进行序列化，JSON.parse进行反序列化<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [[<span class="string">'Jane'</span>],<span class="number">20</span>];</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(a));</span><br><span class="line">a[<span class="number">0</span>][<span class="number">0</span>] = <span class="string">'Tony'</span>;</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">21</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a,b);</span><br></pre></td></tr></table></figure></p><p>核心还是在于不断递归，直到拿到基础类型的值。</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ES6-箭头函数</title>
      <link href="/es6-arrow-function.html"/>
      <url>/es6-arrow-function.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>es6中的箭头函数是function(){}的缩写，可以大大减少代码量;arrow function借鉴了cofferscript中的语法。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> add = <span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> multiply = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a * b;</span><br><span class="line"><span class="built_in">console</span>.log(multiply(<span class="number">2</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>如果只有一个参数，可以更简洁<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="function"><span class="params">a</span> =&gt;</span> a * a;</span><br></pre></td></tr></table></figure></p><p>在funtional programming中，这种写法带来的好处更是得到体现。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> double = numbers.map(<span class="function"><span class="params">n</span> =&gt;</span> n * <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(double)   <span class="comment">// [4,8,2]</span></span><br></pre></td></tr></table></figure></p><p>arrow function不仅仅是让代码更简介，同时解决了函数中this的指向导致的问题。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    name: <span class="string">'Jane'</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    hobbies: [<span class="string">'Computers'</span>,<span class="string">'shopping'</span>,<span class="string">'gaming'</span>],</span><br><span class="line">    sayName ()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Hi, my name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    print()&#123;</span><br><span class="line">        <span class="keyword">this</span>.hobbies.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">hobby</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> likes <span class="subst">$&#123;hobby&#125;</span>`</span>)   <span class="comment">// this.name  undefined</span></span><br><span class="line">        &#125;) </span><br><span class="line">    &#125;,</span><br><span class="line">    newPrint()&#123;</span><br><span class="line">        <span class="keyword">this</span>.hobbies.forEach(<span class="function"><span class="params">hobby</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> likes <span class="subst">$&#123;hobby&#125;</span>`</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.sayName();</span><br><span class="line">person.print();</span><br></pre></td></tr></table></figure></p><p>如上，print里面使用了forEach之后，this指代的是window对象，(nodejs运行指代的是global对象)。而如果使用了箭头函数，如newPrint里面this的指向还是person对象</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ES6-class</title>
      <link href="/es6-class.html"/>
      <url>/es6-class.html</url>
      
        <content type="html"><![CDATA[<p>javascript中是没有built-in class (类)的概念的，es5中为了模拟类去创造对象，使用构造函数来完成，如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,sex</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'Jane'</span>,<span class="number">24</span>,<span class="string">'female'</span>);</span><br></pre></td></tr></table></figure></p><p>es6中引入了class这个概念，但其本质就是语法糖，只是对比es5中创造类的写法更加简洁，更加像面向对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(</span></span><br><span class="line"><span class="class">    <span class="title">constructor</span>(<span class="title">name</span>,<span class="title">age</span>,<span class="title">sex</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    showName()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>es6中定义方法的时候不需要加逗号分割</p><blockquote><p>实现继承<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name='Jane')&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line"> <span class="comment">// child可以继承Parent   </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>继承如何传递参数？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name='Jane')&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">super</span>(); <span class="comment">//只有先调用super(),才能给Child添加或覆盖property,否则会报错this is not defined.super指向Parent的constructor</span></span><br><span class="line">        <span class="keyword">this</span>.age = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>static静态方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> sayHello()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'this is a string'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Human.sayHello); <span class="comment">//不需要实例化，可直接调用</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ES6-定义变量 let, const</title>
      <link href="/es6-let-const.html"/>
      <url>/es6-let-const.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-let-block-scope"><a href="#1-let-block-scope" class="headerlink" title="1.let,block scope"></a>1.let,block scope</h3><p>es6以前，新增变量用var,es6可以使用let产生块状作用域。而以前都是function scope;<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">'Jane'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(name)</span><br></pre></td></tr></table></figure></p><p>es5没有块状作用域体现在上面if{}里面定义的变量可以在外部访问。常见的还有for循环里面定义的变量也是如此<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i)</span><br></pre></td></tr></table></figure></p><p>使用let就能生成封闭的块状作用域。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> age = <span class="number">209</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(age);  <span class="comment">//ReferenceError: age is not defined;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">//ReferenceError: i is not defined;</span></span><br></pre></td></tr></table></figure><h3 id="2-const"><a href="#2-const" class="headerlink" title="2.const"></a>2.const</h3><p>项目中一些希望申明后不被改变的值可以用const<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> KEY = <span class="number">202930</span>;</span><br><span class="line">KEY = <span class="string">'age'</span>;   <span class="comment">// Assignment to constant variable</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ES6-module模块</title>
      <link href="/es6-modules.html"/>
      <url>/es6-modules.html</url>
      
        <content type="html"><![CDATA[<p>css3中都有@import,而es5以前的模块化都是通过外部库来实现，比如require.js等。es6中，模块化功能主要由import和export来实现。<br>通过export来暴露对外接口，通过import来引入。每个模块都有自己单独的作用域。</p><h3 id="export"><a href="#export" class="headerlink" title="export"></a>export</h3><p>export可以输出函数，变量，和类(class)<br>export的写法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> age = <span class="number">20</span>;   <span class="comment">//方法一</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>; <span class="keyword">var</span> name = <span class="string">'jane'</span>; <span class="keyword">export</span> &#123;age,name&#125;  <span class="comment">//方法二</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>; <span class="keyword">export</span> &#123;age <span class="keyword">as</span> number&#125; <span class="comment">// 方法三</span></span><br></pre></td></tr></table></figure></p><p>这种写法主要是得规定对外暴露的接口,函数和对象也要遵循这种写法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;&#125;   <span class="comment">// 方法一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;&#125;  <span class="keyword">export</span> &#123;f&#125;  <span class="comment">// 方法二</span></span><br></pre></td></tr></table></figure></p><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;age,name&#125; <span class="keyword">from</span> <span class="string">'./test.js'</span></span><br></pre></td></tr></table></figure><p>import命令里的大括号指定要export模块导出的变量名。<br>import命令获取的变量是只读的，所以你获取到age, name之后是不能再改变它的</p><h3 id="模块整体加载"><a href="#模块整体加载" class="headerlink" title="模块整体加载"></a>模块整体加载</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;a,b&#125; <span class="keyword">from</span> <span class="string">'./test.js'</span></span><br></pre></td></tr></table></figure><p>这种写法要逐一指定加载的方法，但是也可以整体加载，比如<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> obj <span class="keyword">from</span> <span class="string">'./test.js'</span></span><br><span class="line">obj.a();</span><br></pre></td></tr></table></figure></p><h3 id="export-default-写法"><a href="#export-default-写法" class="headerlink" title="export default 写法"></a>export default 写法</h3><p>之前的例子都是需要执行import时候的模块名字，也可以使用默认default;<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者写成</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> foo;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functionName <span class="keyword">from</span> <span class="string">'./a.js'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ES6-promise</title>
      <link href="/es6-promise.html"/>
      <url>/es6-promise.html</url>
      
        <content type="html"><![CDATA[<p>promise是取代回调函数的一种异步解决方案。promise是一个对象，包含着未来异步事件的结果，可能是resolve(success),或者是reject(fail)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'Good to go'</span>);</span><br><span class="line">    &#125;,<span class="number">1000</span>) </span><br><span class="line">&#125;)</span><br><span class="line">myPromise.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;,(err) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在上面的例子中，我们通过Promise构造函数创造了myPromise实例，该函数接收两个参数，分别是resolve, reject,<br>根据异步事件的结果，成功的话，promise的状态就是resolve,反之是reject。<br>而myPromise这个实例生成之后，通过then方法可以分别指定resolve和reject时候的不同回调。</p><blockquote><p>then的reject也可以不写，或者也可以通过.catch的方法来捕获reject状态</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">myPromise.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>promise的另一个特点就是一旦状态确定，就不会再被改变。只可能是从pending道reject或者是从pending到resolve,而不可能是从<br>resolve再到reject<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'Good to go'</span>);</span><br><span class="line">    &#125;,<span class="number">1000</span>) </span><br><span class="line"></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">        reject(<span class="string">'oh no'</span>);</span><br><span class="line">    &#125;,<span class="number">500</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>在这种情况下， myPromise始终拿到的是reject的。</p><p>假设我们在一个页面有多个请求，只有当所有请求都成功的时候才去执行一个操作,可以用promise.all</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'Good to go'</span>);</span><br><span class="line">    &#125;,<span class="number">1000</span>) </span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> myPromise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'promise 2'</span>)</span><br><span class="line">    &#125;,<span class="number">1500</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([myPromise,myPromise2])</span><br><span class="line">        .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data)</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>高阶函数(filter,map,reduce)</title>
      <link href="/higher-order-function.html"/>
      <url>/higher-order-function.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>什么是higher order function ? </p></blockquote><p>高阶函数（Higher Order Function）是functional programming(函数式编程)的一个重要特点。higher order function意味着，函数可以作为参数被传入和输出，就如同我们普通的变量。比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> triple = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newTripple = tripple;  </span><br><span class="line"><span class="built_in">console</span>.log(newTripple(<span class="number">10</span>))</span><br></pre></td></tr></table></figure><p>常用到的有filter,map, reduce,sort等，higher order function可以帮助我们写更简洁的代码。</p><blockquote><p>filter，该方法返回一个新数组（长度不一定和原来数组相等），数组中的元素为原始数组筛选过后的</p></blockquote><p>filter顾名思义就是筛选，比如有一个动物数组，选出其中类型是狗的，以前做法可能就是for循环一遍，然后定义一个数组，push到新数组里面去<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//要使用到的数组</span></span><br><span class="line"><span class="keyword">let</span> animals = [</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">'fjeifnme'</span>,</span><br><span class="line">        type: <span class="string">'cat'</span>,</span><br><span class="line">        age: <span class="number">20</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">'aaa'</span>,</span><br><span class="line">        type: <span class="string">'dog'</span>,</span><br><span class="line">        age: <span class="number">26</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">'fnme'</span>,</span><br><span class="line">        type: <span class="string">'dog'</span>,</span><br><span class="line">        age: <span class="number">30</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果用以前常规的方法</span></span><br><span class="line"><span class="keyword">var</span> dogs = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; animals.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(animal[i].type === <span class="string">'dog'</span>)&#123;</span><br><span class="line">        dogs.push(animal[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果是用filter</span></span><br><span class="line"><span class="keyword">let</span> isDog = <span class="function"><span class="keyword">function</span>(<span class="params">animal</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> animal.type === <span class="string">'dog'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> dogs = animals.filter(isDog); <span class="comment">//这里filter接收一个函数作为参数，就是functional programming的表现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以更简洁</span></span><br><span class="line"><span class="keyword">var</span> dogs = animals.filter(<span class="function"><span class="params">animal</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> animal.type === <span class="string">'dog'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>map</p></blockquote><p>map很好理解就是映射，map() 方法返回一个新数组（长度和原来数组相等），数组中的元素为原始数组元素调用函数处理后的值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以前的for循环写法,只返回</span></span><br><span class="line"><span class="keyword">var</span> names = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; animals.length; i++)&#123;</span><br><span class="line">    names.push(animals[i].name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果直接使用map,只返回所有动物的名字这个key</span></span><br><span class="line"><span class="keyword">let</span> names = animals.map(<span class="function"><span class="params">animal</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> animal.name</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当然我们也可以使用map生成我们想要的数组，添加一些新的key,比如<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dogArray = animals.map(<span class="function">(<span class="params">animal,id</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        id: <span class="string">`这个狗的序号是<span class="subst">$&#123;id+<span class="number">1</span>&#125;</span>`</span>,</span><br><span class="line">        name: animal.name,</span><br><span class="line">        price: id * animal.age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><blockquote><p>reduce</p></blockquote><p>reduce也是一个很强大的功能，可以用来求和，比如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> orders = [</span><br><span class="line">    &#123;<span class="attr">amount</span>: <span class="number">110</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">amount</span>: <span class="number">140</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">amount</span>: <span class="number">190</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">amount</span>: <span class="number">210</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newAmount = orders.reduce(<span class="function">(<span class="params">sum,item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sum + item.amount</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> orderList = [</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">'activity1'</span>,</span><br><span class="line">        ticket: [</span><br><span class="line">            &#123;</span><br><span class="line">                title: <span class="string">'1'</span>,</span><br><span class="line">                order: <span class="number">10</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                title: <span class="string">'1'</span>,</span><br><span class="line">                order: <span class="number">20</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                title: <span class="string">'1'</span>,</span><br><span class="line">                order: <span class="number">30</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">'activity1'</span>,</span><br><span class="line">        ticket: [</span><br><span class="line">            &#123;</span><br><span class="line">                title: <span class="string">'1'</span>,</span><br><span class="line">                order: <span class="number">20</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                title: <span class="string">'1'</span>,</span><br><span class="line">                order: <span class="number">20</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                title: <span class="string">'1'</span>,</span><br><span class="line">                order: <span class="number">100</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">orderList.forEach(<span class="function">(<span class="params">item,index</span>) =&gt;</span> &#123;</span><br><span class="line">    orderList[index].count = item.ticket.reduce(<span class="function">(<span class="params">sum,sub</span>) =&gt;</span> &#123;</span><br><span class="line">        sum +=  sub.order;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;,<span class="number">0</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(orderList)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css垂直和水平居中总结</title>
      <link href="/center.html"/>
      <url>/center.html</url>
      
        <content type="html"><![CDATA[<h2 id="水平方向"><a href="#水平方向" class="headerlink" title="水平方向"></a>水平方向</h2><h6 id="如果是inline或者inline-table"><a href="#如果是inline或者inline-table" class="headerlink" title="如果是inline或者inline-table"></a>如果是inline或者inline-table</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="如果是block"><a href="#如果是block" class="headerlink" title="如果是block"></a>如果是block</h6><pre><code>margin-left,margin-right为auto并且添加宽度，不添加宽度就默认占整行宽度</code></pre><a id="more"></a><h2 id="垂直方向"><a href="#垂直方向" class="headerlink" title="垂直方向"></a>垂直方向</h2><h6 id="如果是inline或者inline-table且只有一行"><a href="#如果是inline或者inline-table且只有一行" class="headerlink" title="如果是inline或者inline-table且只有一行"></a>如果是inline或者inline-table且只有一行</h6><pre><code>一般使用padding-top,padding-bottom同样的值，或者height,line-height一样即可</code></pre><h6 id="如果是inline或者inline-table且多行"><a href="#如果是inline或者inline-table且多行" class="headerlink" title="如果是inline或者inline-table且多行"></a>如果是inline或者inline-table且多行</h6><pre><code>也可以使用padding上下高度值一致实现，或者通过css table布局来实现</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">250px</span>;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">240px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span> <span class="selector-class">.children</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background</span>: black;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">10px</span> solid white;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>或者通过flexbox布局</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-center</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意以上都是给父元素添加了固定高度</p></blockquote><h6 id="垂直居中块状元素且高度确定"><a href="#垂直居中块状元素且高度确定" class="headerlink" title="垂直居中块状元素且高度确定"></a>垂直居中块状元素且高度确定</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然flexbox也可以轻松实现水平和垂直居中、<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>webpack整理一</title>
      <link href="/webpack-1.html"/>
      <url>/webpack-1.html</url>
      
        <content type="html"><![CDATA[<p>之前都是用的vue-cli等脚手架工具，直接生成webpack配置文件，或者是对webpack.config.js了解些，但是并没有自己去手动配置一个自动化项目。<br>整理一下webpack相关知识点。不仅仅是用，而要去理解背后的原理才行。</p><blockquote><p>webpack是什么？</p></blockquote><p>webpack是一个模块化打包工具。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。</p><blockquote><p>为什么要用webpack ?</p></blockquote><p>关于前端自动化和工程化就是，比如项目上线前的html,css,js等都是要进行压缩和合并，来实现减少http请求数量和体积的目的。我们可以手动去做这件事情，但显然太low。<br>前端自动化就是写个脚本，执行脚本让这些文件等自动压缩合并等，这是从前端优化层面来讲的。还有一个是目前写css都是用的sass,js都是es6，而浏览器本身是不支持这些的，需要一些预编译的工具去转换，<br>而webpack等构建工具就能很好的完成这以工作。</p><blockquote><p>webpack与gulp的区别是什么？</p></blockquote><p>gulp中有个概念是pipeline。它的工作原理是：通过配置文件，指明对某些文件进行编译，组合，压缩等任务的具体步骤。可以理解为一种单向，直线性的工作方式。</p><p><img src="http://upload-images.jianshu.io/upload_images/1031000-d0693c06bb3a00e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="gulp"></p><p>而webpack更多的是一种模块化的解决方案，它可以分析各个文件之间的依赖关系</p><p><img src="http://upload-images.jianshu.io/upload_images/1031000-160bc667d3b6093a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="webpack"></p><blockquote><p>开始使用</p></blockquote><ul><li>webpack依赖node环境，先确保装了node.</li><li>新建文件夹，通过npm init创建package.json文件，来记录所有依赖的包。</li><li>执行命令安装webpack, npm install –save-dev webpack</li><li>安装完成，新建wbpack.config.js文件</li><li>package.json里面添加script脚本build: webpack -p </li></ul><blockquote><p>webpack.config.js配置文件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry:  __dirname + <span class="string">"main.js"</span>,<span class="comment">//入口文件</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname + <span class="string">"/dist"</span>,<span class="comment">//打包后的文件存放的地方</span></span><br><span class="line">    filename: <span class="string">"app.bundle.js"</span><span class="comment">//打包后输出文件的文件名</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是一个基础webpack配置文件，定义入口和打包后的文件</p><blockquote><p>webpack具体作用有哪些？</p></blockquote><ol><li>使用style-loader!css-loader!sass-loader实现css模块化</li></ol><p>loader 就是对模块的源代码进行转换。loader的解析是从右边到左边的。所以先是sass-loader，把sass语言转换成css语言。但是webpack只能识别js语言，而不是css，这样是会报错的，所以通过css-loader把css转成js(还是css的字符串)，然后再通过style-loader生成一个style标签插入到dom中。</p><ol start="2"><li><p>使用babel-loader等从es6+到es5</p></li><li><p>使用devServer创建本地服务</p></li></ol><p>To be Continued…</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javascript错误类型</title>
      <link href="/javascript-error-types.html"/>
      <url>/javascript-error-types.html</url>
      
        <content type="html"><![CDATA[<p>参考mozilla developer.</p><blockquote><p>ReferenceError</p></blockquote><p>reference就是引用错误。比如调用了一个不存在的变量或者方法. Uncaught ReferenceError: sth is not defined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fn();   =&gt; <span class="built_in">ReferenceError</span>: fn is not defined</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(c);   =&gt; <span class="built_in">ReferenceError</span>: c is not defined</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><blockquote><p>SyntaxError</p></blockquote><p>解析代码时发生的语法错误</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">1</span>ab;  </span><br><span class="line"><span class="built_in">console</span>.log(number)   =&gt; <span class="built_in">SyntaxError</span>: Invalid or unexpected token</span><br></pre></td></tr></table></figure><blockquote><p>TypeError</p></blockquote><p>变量或参数不是预期类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fn();</span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'aa'</span>)   =&gt; <span class="built_in">TypeError</span>: fn is not a <span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>RangeError</p></blockquote><p>超出有效范围</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a= <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">-1</span>);  =&gt; Uncaught <span class="built_in">RangeError</span>: Invalid array length</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js hoist</title>
      <link href="/hoist.html"/>
      <url>/hoist.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-什么是hoist-函数申明提升"><a href="#1-什么是hoist-函数申明提升" class="headerlink" title="1.什么是hoist,函数申明提升"></a>1.什么是hoist,函数申明提升</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="number">1</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码能正常执行就是因为函数声明提升。我们知道create一个函数有两种方法，函数申明和函数表达式。那么函数表达式有提升这个情况吗？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;<span class="built_in">console</span>.log(a)&#125;</span><br></pre></td></tr></table></figure></p><p>答案是否定的，控制台会显示test is not a function。同样是函数，为什么函数申明和函数表达式表现不一样呢？这里可以引入变量的声明提升了。</p><h3 id="2-变量声明提升"><a href="#2-变量声明提升" class="headerlink" title="2.变量声明提升"></a>2.变量声明提升</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a)              =&gt; error: a is not defined</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="keyword">var</span> b;      =&gt; <span class="literal">undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="keyword">var</span> c = <span class="number">10</span>; =&gt; <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><p>直接打印a,会报错not defined,而先打印b,再声明b，却是undefined,注意not defined是个error报错，而undefined是一种值类型。<br>因为把函数赋值给变量，函数表达式就和变量声明提升的表现一样了。那为什么js有这样的表现呢？网上找的各种资料，包括高程3这本书，都是说变量和函数声明被提升到它们函数作用域的顶端。但是为什么是这样呢？此时就要引入执行环境的概念了。(execution context)</p><h3 id="3-执行环境有两个阶段"><a href="#3-执行环境有两个阶段" class="headerlink" title="3.执行环境有两个阶段?"></a>3.执行环境有两个阶段?</h3><p>当一个函数代码被执行的时候都会生成一个执行环境，<br>函数每被调用一次，都会产生一个新的执行上下文环境。因为不同的调用可能就会有不同的参数。It’s a new and different copy.<br>这个执行环境中有私有作用域。对js解析器而言，每次生成一个执行环境分成两部。（个人理解）<br>Firts,it creates. Then it execute.首先是创建阶段。然后是执行阶段。<br>创建阶段做的事情包括：1.创建一个作用域链。2，创建变量(只是读取，此时并不赋值)，函数和参数；3，确定this指向。<br>执行阶段：赋值，引用函数，解释/执行代码。<br>我们也可以说执行环境在创建阶段有三个属性：<br>1.scopeChain<br>2.this<br>3.variables object, like arguments<br>函数代码又有全局代码，函数体（函数代码），eval(不推荐使用)。所以我们能看到在console里面直接输入this，会是window对象。因为即使你什么都没写，只是引入空白的js文件，此时也会有个全局的执行环境，其中就有this<br>这也就解释了变量申明提升的情况下，a的值是undefined.</p><p>引自：<a href="http://davidshariff.com/blog/what-is-the-execution-context-in-javascript" target="_blank" rel="noopener">http://davidshariff.com/blog/what-is-the-execution-context-in-javascript</a></p><ul><li>解释器是如何执行代码的：</li></ul><ol><li>调用函数代码</li><li>在执行函数代码前，创建执行环境</li><li>进入创建阶段：</li></ol><ul><li>初始化作用域链</li><li>创建变量对象:</li><li>创建arguments对象，检查环境中的参数，初始化名和值，创建一个参考副本</li><li>扫描环境中内的函数声明：</li><li>某个函数被发现，在变量对象创建一个属性，它是函数的确切名。它是一个指针在内存中，指向这个函数。</li><li>如果这个函数名已存在，这个指针的值将会重写。</li><li>扫描环境内的变量声明</li><li>某个变量声明被发现，在变量对象中创建一个属性，他是变量的名，初始化它的值为undefined。</li><li>如果变量名在变量对象中已存在，什么也不做，继续扫描。</li><li>在环境中确定this的值。</li></ul><ol start="4"><li>激活/代码执行阶段：在当前上下文上运行/解释函数代码，并随着代码一行行执行指派变量的值</li></ol><p>总之：变量在执行环境的创建阶段就被赋值成undefined，而函数申明则是在创建阶段过程中完成了赋值。所以在执行环境的真正执行阶段，函数申明和函数表达式不一样。</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js闭包</title>
      <link href="/closure.html"/>
      <url>/closure.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>close is a function with preserved variables.闭包就是可以访问其他函数内部变量的函数。<br> 之前说过，一个函数进入道执行栈中的时候会生成一个执行环境，当代码执行完了，该执行环境会出栈并被销毁，里面的变量环境等也被销毁，但是闭包不同,<br> 闭包里面return的function还保留着它的作用域链下可以访问的变量<br> 最简单的场景：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">out</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a + b)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> inner;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fn = out();</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure></p></blockquote><p>在这个情况下，out()被赋值给fn, 而fn()还是可以访问a,b，fn的创建其实是执行out()，而out已经执行结束了，为什么还可以访问变量b ？function out()返回的是一个函数 inner, 而inner的执行环境不能被销毁，因为它里面有对a，b变量的引用，所以inner可访问的作用域链也就被保留了下来。<br>所以也说说法，闭包会增加内存开销。</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js原型，原型链</title>
      <link href="/prototype.html"/>
      <url>/prototype.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-如何判断数据类型？"><a href="#1-如何判断数据类型？" class="headerlink" title="1.如何判断数据类型？"></a>1.如何判断数据类型？</h3><p>基础类型的值都可以直接用typeof,比如：</p><p>typeof Undefined =&gt; ‘undefined’<br>typeof Null =&gt; ‘object’<br>typeof String =&gt; ‘string’<br>typeof Number =&gt; ‘number’<br>typeof Boolean =&gt; ‘boolean’<br>typeof Array =&gt; ‘object’<br>typeof Object =&gt; ‘object’<br>typeof Function =&gt; ‘function’<br>但是对于引用类型的值，Array,Object判断就不够准确了。就要使用instanceof ;<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = []; arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>   =&gt; <span class="literal">true</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;; obj <span class="keyword">instanceof</span> <span class="built_in">Object</span>  =&gt; <span class="literal">true</span></span><br><span class="line">              obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>   =&gt; <span class="literal">false</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">              fn <span class="keyword">instanceof</span> <span class="built_in">Function</span> =&gt; <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h3 id="2-引用类型的值都是对象？"><a href="#2-引用类型的值都是对象？" class="headerlink" title="2.引用类型的值都是对象？"></a>2.引用类型的值都是对象？</h3><p>以上代码都是很好理解的，arr是Array创造的实例，obj是Object创造的实例；那下面的呢？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fn <span class="keyword">instanceof</span> <span class="built_in">Object</span>  =&gt; <span class="literal">true</span></span><br><span class="line">arr <span class="keyword">instanceof</span> <span class="built_in">Object</span> =&gt; <span class="literal">true</span></span><br><span class="line"><span class="built_in">Function</span> instance <span class="keyword">of</span> <span class="built_in">Object</span> =&gt; <span class="literal">true</span></span><br><span class="line"><span class="built_in">Array</span> instaceof <span class="built_in">Object</span> =&gt; <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>为什么fn函数实例，arr数组实例以及Function, Array构造函数都是Object呢？上面的代码表现证明了：引用类型的值都是对象。一切都是对象这句话该如何理解？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'2'</span>)&#125;</span><br><span class="line">fn.age = <span class="number">20</span>;</span><br><span class="line">fn.name = <span class="string">'Jane'</span>;</span><br></pre></td></tr></table></figure><p>fn这个函数作为对象，被赋值了age,和name这个属性，通过fn.age，我们也可以拿到20;(进一步证明函数也是对象)<br>那背后的原理是什么？</p><h3 id="3-instanceof的原理？"><a href="#3-instanceof的原理？" class="headerlink" title="3.instanceof的原理？"></a>3.instanceof的原理？</h3><p>a instanceof b，判断a实例是不是b, 其实就是拿a的<strong>proto</strong>隐式原型去和b的prototype比较，如果是同一个引用，则返回true,反之；<br>那么什么又是<strong>proto</strong>和prototype呢？要理解原型，可以先去通过构造函数举例。</p><h3 id="4-由构造函数到原型？"><a href="#4-由构造函数到原型？" class="headerlink" title="4.由构造函数到原型？"></a>4.由构造函数到原型？</h3><p>我们都知道声明一个对象可以通过构造函数，或者更简单使用对象字面量。而对象字面量其实只是’语法糖’，帮助我们更方便地去申明对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'myname'</span>,</span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以对象字面量申明对象的完整代码应该是：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    obj2.name = <span class="string">'myname2'</span>;</span><br><span class="line">    obj2.age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></p><p>而在js中，new后面跟的大写的Object是构造函数，那么也就是说对象,数组其实是通过函数生成的；而函数其实又是对象。<br>该如何去理解对象与函数之间的关系？构造函数实例和构造函数本身又是什么关系呢？</p><h3 id="5-prototype"><a href="#5-prototype" class="headerlink" title="5.prototype"></a>5.prototype</h3><p>记住：每一个构造函数都有一个prototype属性，这个属性指向它的原型对象，这个对象又有constructor属性指回构造函数本身。<br>而构造函数创造的实例有一个隐式原型<strong>proto</strong>，它也指向构造函数的原型对象。<br>这也就解释了为什么instaceof的工作原理，因为实例的<strong>proto</strong>和创造实例的构造函数的prototype都指向同一个引用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj.__proto__ === <span class="built_in">Object</span>.prototype   =&gt; <span class="literal">true</span></span><br><span class="line">arr.__proto__ === <span class="built_in">Array</span>.prototype    =&gt; <span class="literal">true</span></span><br><span class="line">fn.__proto__ === <span class="built_in">Function</span>.prototype  =&gt; <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>如图：<br>那么，Object原型又指向什么呢？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Funciton.prototype.__proto__ === <span class="built_in">Object</span>.prototype  =&gt; <span class="literal">true</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.__proto__ === <span class="built_in">Object</span>.prototype     =&gt; <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>这也解释了为什么function,array都是对象，那么对象的原型最终又指向什么呢？Object.prototype的<strong>proto</strong>指向的是null<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.__proto__ === <span class="function"><span class="params">null</span>  =&gt;</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>总之：函数是对象，而对象又是被函数创造出来的</p><h3 id="6-原型的集成和原型链"><a href="#6-原型的集成和原型链" class="headerlink" title="6.原型的集成和原型链"></a>6.原型的集成和原型链</h3><p>我们知道每个对象实例都是通过Object构造函数生成的，我们也知道Object构造函数和obj这个实例都指向同一个引用。<br>假设我们有一个Person构造函数，要生成100个person实例，每个person实例上面都有共同的方法，如果每个方法都直接定义在实例上，显然影响效率。这时候可以定义在Person上面。<br>因为Person.prototyp和person.<strong>proto</strong>指向同一个引用。所以实例可以去继承方法。<br>当js引擎读取一个对象的属性，会先在实例上查找，如果没有，再沿着<strong>proto</strong>去原型上找，这就是原型链。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line">Person.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'test'</span>)&#125;</span><br><span class="line">Person.age = <span class="number">20</span>;</span><br><span class="line">person1.getName();</span><br></pre></td></tr></table></figure></p><p>那实际中怎么区分一个对象的属性是它自身还是这个对象原型上面的呢？ 通过hasOwnProperty<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(person1.hasOwnProperty(age))&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js作用域</title>
      <link href="/scope.html"/>
      <url>/scope.html</url>
      
        <content type="html"><![CDATA[<p>之前在说execution context(执行环境)的时候有说过，执行环境创建阶段会figure out the scopeChain of a function.那么scope到底指的是什么呢？<br>在我看来，scope just determine what variables can be accessed。比如：子作用域可以沿着scope chain访问到父作用域里面的变量等。<br>作用域的最大用途在于，不同作用域下面，同样的变量名不会重复。<br>说到作用域，就想起function scope和lexical scope这两个概念。</p><p>###1.function scope<br>function scope存在是因为es6以前不存在块状作用域。{} 这里面包含的变量是可以被外部访问到的，如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> test = <span class="string">'name'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(test)     =&gt; <span class="string">'name'</span></span><br></pre></td></tr></table></figure></p><p>那么如果我们想创建一个局部变量怎么操作呢？答案是function scope, function里面的变量是局部的</p><p>Note: es6+以后可以使用let产生block scope(块状作用域)。</p><p>###2.lexical scope<br>lexical scope该怎么翻译呢，词法作用域？lexical scope means that scope is determined by where it physical sits.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)  <span class="comment">//函数创建时就确定了取值的作用域</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fb</span>(<span class="params">f</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line">    f();</span><br><span class="line">&#125;</span><br><span class="line">fb(fn)</span><br></pre></td></tr></table></figure></p><p>var a = 20 this can only be accessed by fb(); fn()里面的a只能是fn()内部或者全局变量，那么就是10，而不是20， this is because lexical scope.<br>如果是<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">    b();</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br></pre></td></tr></table></figure></p><p>这种情况下，function b sit physically inside function fn,所以可以沿着作用域链访问到fn<br>额，或者换中解释，scopeChain的确定是在执行环境的创造阶段，而不是真正execute阶段。是在函数定义阶段，而不是真正执行阶段</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>single-thread js运行机制单线程</title>
      <link href="/single-thread.html"/>
      <url>/single-thread.html</url>
      
        <content type="html"><![CDATA[<h3 id="Javascript运行机制单线程"><a href="#Javascript运行机制单线程" class="headerlink" title="Javascript运行机制单线程"></a>Javascript运行机制单线程</h3><blockquote><p>javascript is a single-thread, non-blocking, asynchronous concurrent language.</p></blockquote><h4 id="1-why-js-single-thread"><a href="#1-why-js-single-thread" class="headerlink" title="1.why js single-thread?"></a>1.why js single-thread?</h4><p>作为浏览器脚本语言，如果是多线程的，假如用户在一个线程上hide一个节点，另外一个线程上show，那么到底该怎么处理呢？javascript这一语言核心特征就是单线程，这也是由js语言的用途来决定的。</p><h4 id="2-what-is-single-thread"><a href="#2-what-is-single-thread" class="headerlink" title="2.what is single-thread?"></a>2.what is single-thread?</h4><p>单线程意味着js engine解析代码的时候，一次只有一个主线程，只能做一件事。</p><h4 id="3-非阻塞-non-block"><a href="#3-非阻塞-non-block" class="headerlink" title="3.非阻塞,non-block"></a>3.非阻塞,non-block</h4><p>non-blocking是指当代码需要进行一项异步操作，如setTimeout,ajax请求等)，因为js是同步单线程，所以异步操作(webapi异步处理模块)会被到event queue(任务队列中)。这个任务会被挂起，当execution stack里面没有要执行的代码时，event queue里面的pending任务会被推送到执行栈中执行。</p><h4 id="4-what-is-stack-and-heap"><a href="#4-what-is-stack-and-heap" class="headerlink" title="4. what is stack and heap?"></a>4. what is stack and heap?</h4><p>heap(堆)用来存放对象,stack(栈)存放基础变量以及对象的指针。浏览器首次加载js，默认是全局执行环境。当我们执行function a的时候，会在stack中生成对应的execution context(执行环境)，被放在全局执行环境上面。执行环境有该函数定义的变量，作用域，方法的参数等。function a里面调用function b,那么又会生成一个function b的execution context，funciton b在stack最顶端, 当function b里面的代码执行完毕，会从stack里面移除销毁，那么当前的执行环境变成a,执行a里面的代码。这个过程一直进行下去的。而栈溢出的情况就是指超过了stack内存的最大值。<br>    <!-- Todo：这里要添加一些图片等，js weird parts --></p><h4 id="5-what-is-event-queue-callback-queue-task-queue"><a href="#5-what-is-event-queue-callback-queue-task-queue" class="headerlink" title="5. what is event queue/callback queue/task queue ?"></a>5. what is event queue/callback queue/task queue ?</h4><p>如果在执行function a的时候，发现里面有setTimeout 2秒，js进程不会等起，而是等它到了时间之后(2秒)之后，把它放到event queue里面。event queue和execution stack可以理解为并列的，但是只有当前执行栈没有可执行的代码的时候，才会去执行event queue里面的任务。</p><h4 id="6-what-is-event-loop"><a href="#6-what-is-event-loop" class="headerlink" title="6. what is event loop ?"></a>6. what is event loop ?</h4><p>主线程处于闲置状态时（current execution stack is empty）,会去查看event queue,并把第一个event推到执行栈,执行其中的同步代码。这个不断重复的过程就叫事件循环。</p><h4 id="7-微任务（micro-task）和宏任务（macro-task）"><a href="#7-微任务（micro-task）和宏任务（macro-task）" class="headerlink" title="7. 微任务（micro task）和宏任务（macro task）?"></a>7. 微任务（micro task）和宏任务（macro task）?</h4><p>异步任务可以分成微任务和宏任务。<br>同一次事件循环中，微任务永远在宏任务之前执行。微任务队列中的事件会先处理。(2,3,1)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    resolve(<span class="number">3</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Object.prototype.<strong>proto</strong> === null</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Understanding this</title>
      <link href="/this.html"/>
      <url>/this.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>当一个函数被调用的时候会有执行环境，而执行环境在解析阶段（create phase）要做的事情之一，就是确定this指向。那么this到底值什么呢？</p></blockquote><p>this取值和创造以及调用函数的时候有关。有以下4种情况</p><h3 id="Method-One-function-expression"><a href="#Method-One-function-expression" class="headerlink" title="Method One.function expression"></a>Method One.function expression</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo();   =&gt; <span class="keyword">this</span>指的global object, 而global obj又是由runtime environment决定的，在浏览器里面，指的是<span class="built_in">window</span></span><br></pre></td></tr></table></figure><h3 id="Method-Two-function-inside-a-object"><a href="#Method-Two-function-inside-a-object" class="headerlink" title="Method Two.function inside a object"></a>Method Two.function inside a object</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    foo: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>)    <span class="comment">//这里的this指的是object它本身</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.foo();</span><br></pre></td></tr></table></figure><h3 id="Method-Three-Use-new-keyword-to-create-objects"><a href="#Method-Three-Use-new-keyword-to-create-objects" class="headerlink" title="Method Three.Use new keyword to create objects"></a>Method Three.Use new keyword to create objects</h3><p>当我们使用构造函数去创建一个实例的时候，this指向的是实例对象本身。</p><h3 id="Method-Four-call-apply"><a href="#Method-Four-call-apply" class="headerlink" title="Method Four call/apply"></a>Method Four call/apply</h3><p>当一个函数被call和apply调用时，this的值就取传入的对象的值。</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何在vue项目中使用SCSS</title>
      <link href="/use-scss-in-vue.html"/>
      <url>/use-scss-in-vue.html</url>
      
        <content type="html"><![CDATA[<p>css预处理器，自己一直用的sass的scss语法。最开始用vue的时候，以为只能写原生css,后来发现有一个教程里面，老师用的是stylus（另外一种css预处理器），觉得应该也能用scss，就搜集了资料弄好了。整理步骤：（用vue-cli初始化这个项目）</p><p>1，npm安装node-sass sass-loader, style-loader</p><p>2，修改webpack loader编译配置，因为vue依赖webpack进行打包编译，</p><p>{ test: /.scss$/, loader:’style!css!sass’ },</p><p>3 在对应组件里设置style标签<style lang="scss" rel="stylesheet/scss"><br>  Done!<br></p></p></p></p><p>4, 如果要引用mixin等，在style里面先import，然后@include mixin</p></style></p>]]></content>
      
      
      <categories>
          
          <category> Vuejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vuejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何在wordpress中嵌入codepen</title>
      <link href="/codepen.html"/>
      <url>/codepen.html</url>
      
        <content type="html"><![CDATA[<p>今天中午看csstricks的时候,发现人家直接在页面用codepen显示动态效果，html，css，result做成tab选项卡，太酷了。</p><a id="more"></a><p>觉得自己好蠢啊，之前为了展示效果，居然还去做成gif动画，gif动画太浪费资源了，打开页面又慢。然后youtube上搜了个教程，2分钟就搞定了。原英文教程：<a href="https://www.youtube.com/watch?v=Udumc05iOqA" target="_blank" rel="noopener">https://www.youtube.com/watch?v=Udumc05iOqA</a> 实现效果：<a href="http://www.webfront.online/css3/shake1" target="_blank" rel="noopener">http://www.webfront.online/css3/shake1</a></p><h3 id="如何在wordpress页面中插入codepen呢？"><a href="#如何在wordpress页面中插入codepen呢？" class="headerlink" title="如何在wordpress页面中插入codepen呢？"></a>如何在wordpress页面中插入codepen呢？</h3><p>先去下载wordpress插件，CodenPen Embedded Pens Shortcode ,<br>注册codepen账号，写好代码save之后，右下角有export， 选择wordpress，复制里面的代码，直接粘贴到wordpress页面中。</p><p>Done!</p>]]></content>
      
      
      <categories>
          
          <category> Wordpress </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wordpress </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS3动画(二)实现shake震动效果</title>
      <link href="/shake1.html"/>
      <url>/shake1.html</url>
      
        <content type="html"><![CDATA[<p>用css3 animation实现震动效果是比较简单的。核心在于css3 @keyframs,利用transform: translate效果，在x轴上进行左右平移，先右平移4px,然后左-4px，最终回到终点0px, linear表示匀速运动;</p><iframe height="665" scrolling="no" title="mwxBgq" src="//codepen.io/songqing/embed/mwxBgq/?height=265&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/songqing/pen/mwxBgq/" target="_blank" rel="noopener">mwxBgq</a> by songqing (<a href="https://codepen.io/songqing" target="_blank" rel="noopener">@songqing</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe>]]></content>
      
      
      <categories>
          
          <category> CSS3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nodejs制作一个电影分享Webapp</title>
      <link href="/app1.html"/>
      <url>/app1.html</url>
      
        <content type="html"><![CDATA[<p>整理一下前段时间自己用nodejs, 豆瓣电影api，express等制作的一个简单的app。UI用bootstrap，样式就直接跳过。</p><a id="more"></a><h3 id="1-初始化package-json"><a href="#1-初始化package-json" class="headerlink" title="1. 初始化package.json"></a>1. 初始化package.json</h3><p>创建一个文件夹，同时在git bash里面切换到当前路径，npm init创建一个package.json文件用来管理安装的依赖包，会提示一系列问题，入口文件这里自己改成了app.js</p><h3 id="2-安装express框架"><a href="#2-安装express框架" class="headerlink" title="2. 安装express框架"></a>2. 安装express框架</h3><p><code>npm install --save-dev express</code> 安装到开发环境，<br>require express,并且新建一个express实例，这样app就拥有了express的所有方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br></pre></td></tr></table></figure><h3 id="3-设置前端路由routes"><a href="#3-设置前端路由routes" class="headerlink" title="3. 设置前端路由routes"></a>3. 设置前端路由routes</h3><p>这次主要包括三个页面，首页home，对应的单个电影页面，404错误页面，这些页面都用ejs模版来渲染。 建立文件夹routes，然后require这个模块，把模版引擎设置成ejs，因为后面view文件夹里面的页面都是用ejs来写的， 设置路由，首页的时候就获取routes的home模块，如果是对应单个页面，则根据输入都电影id号码来判断输出具体页面，其余的则返回404找不到页面; app.listen监听了端口号8080</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> routes = <span class="built_in">require</span>(<span class="string">'./routes'</span>);</span><br><span class="line"></span><br><span class="line">app.set(<span class="string">'view engine'</span>,<span class="string">'ejs'</span>);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, routes.home);</span><br><span class="line">app.get(<span class="string">'/star_wars_episode/:episode_number?'</span>, routes.movie_single);</span><br><span class="line">app.get(<span class="string">'*'</span>, routes.notFound);</span><br><span class="line"></span><br><span class="line">app.listen(process.env.PORT || <span class="number">8000</span>);</span><br></pre></td></tr></table></figure><h3 id="4-routes下面index-js获取json数据并且渲染"><a href="#4-routes下面index-js获取json数据并且渲染" class="headerlink" title="4. routes下面index.js获取json数据并且渲染"></a>4. routes下面index.js获取json数据并且渲染</h3><p>首先要获取这个json数据，我直接放在本地的， <code>var movieJSON = require(&#39;../movies.json&#39;);</code></p><p>因为我们在前面用了routes.home这种，既然前面使用了，那么后面必须要export才行； function接收两个参数，req表示发送的请求，res表示获取的数据， 这里使用res.render这个方法对home这个ejs文件进行了渲染，添加了title属性，并把movies保存在对象movies中， 这样home.ejs就可以使用title，以及movies了；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">exports.home = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> movies = movieJSON.movies;</span><br><span class="line"></span><br><span class="line">    res.render(<span class="string">'home'</span>,&#123;</span><br><span class="line">        title: <span class="string">'最新上映电影'</span>,</span><br><span class="line">        movies: movies</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">exports.notFound = <span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> movies = movieJSON.movies;</span><br><span class="line">    res.render(<span class="string">'notFound'</span>,&#123;</span><br><span class="line">        movies : movies,</span><br><span class="line">        title : <span class="string">"对不起，您访问的页面不存在哦"</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>根据url不同电影id号来渲染不同页面。 首先要获取用户url传入的是哪个id，在php中可以使用$&#95;POST, $&#95;GET,nodejs可以使用req.params.id,就是通过用户请求的参数来判断; 因为这里只添加了6个电影，所以要判断，如果不在这个范围之类，证明无效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">exports.movie_single = function(req, res)&#123;</span><br><span class="line">    var episode_number = req.params.episode_number;</span><br><span class="line"></span><br><span class="line">    var movies = movieJSON.movies;</span><br><span class="line"></span><br><span class="line">    if(episode_number &gt;=1 &amp;amp;&amp;amp; episode_number &lt;=6)&#123;</span><br><span class="line">        var movie = movies[episode_number - 1];</span><br><span class="line">        var title = movie.title;</span><br><span class="line">        var main_characters = movie.main_characters;</span><br><span class="line">        res.render(&apos;movie_single&apos;,&#123;</span><br><span class="line">            movies: movies,</span><br><span class="line">            movie: movie,</span><br><span class="line">            title: title,</span><br><span class="line">            main_characters: main_characters</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        res.render(&apos;notFound&apos;,&#123;</span><br><span class="line">            movies: movies,</span><br><span class="line">            title: &quot;对不起，您访问的页面不存在哦&quot;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="5-设置view公共部分（header-head-footer）"><a href="#5-设置view公共部分（header-head-footer）" class="headerlink" title="5.设置view公共部分（header, head, footer）"></a>5.设置view公共部分（header, head, footer）</h3><p>页面一共分为首页，单个页面，404页面，每个页面都有公共头部，底部等，所以先写公共的;</p><p>head就是meta，引入的css文件那些： 创建一个文件夹view存放所有ejs页面，创建partials来存放公共部分，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">title</span> %&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"http://cdn.bootcss.com/bootstrap/3.3.4/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"/stylesheets/styles.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>header部分主要是标题和一个下单菜单，直接用的bootstrap来做的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar navbar-fixed-top navbar-reverse"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-padding"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">                热门电影</span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">                    &lt;% for(var i=1; i&lt;movies.length; i++)&#123; %&gt;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/star_wars_episode/&lt;%= i %&gt;"</span> <span class="attr">class</span>=<span class="string">"episode_link"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">movies</span>[<span class="attr">i</span> <span class="attr">-</span> <span class="attr">1</span>]<span class="attr">.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">%</span> &#125;%&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里ejs使用了for循环语法，遍历里面每一个电影的名字;</p><p>footer公共部分：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-padding"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer-content"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Copyright &amp;amp;copy; 2017 Nodejs Demo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><p>script公共部分：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"http://cdn.bootcss.com/jquery/2.2.2/jquery.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="string">"http://cdn.bootcss.com/bootstrap/3.3.4/js/bootstrap.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="6-设置home-ejs"><a href="#6-设置home-ejs" class="headerlink" title="6. 设置home.ejs"></a>6. 设置home.ejs</h3><p>首先要include对应的公共部分，其次利用循环获取每一个movie的title，description, image等到页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">include</span> <span class="attr">partials</span>/<span class="attr">head.ejs</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">include</span> <span class="attr">partials</span>/<span class="attr">header.ejs</span> %&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"hero-image"</span> <span class="attr">class</span>=<span class="string">"blur"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"hero-title"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">title</span> %&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"posters-wrapper"</span> <span class="attr">class</span>=<span class="string">"content-padding-clearfix"</span>&gt;</span></span><br><span class="line">            &lt;% for(var i=0;i&lt;movies.length;i++)&#123; %&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"poster"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/star_wars_episode/&lt;%= movies[i].episode_number %&gt;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/images/&lt;%= movies[i].poster %&gt;"</span> <span class="attr">class</span>=<span class="string">"img-responsive"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"poster-info-overlay"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">movies</span>[<span class="attr">i</span>]<span class="attr">.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>查看详情<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">include</span> <span class="attr">partials</span>/<span class="attr">footer.ejs</span> %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">include</span> <span class="attr">partials</span>/<span class="attr">scripts.ejs</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-单个页面ejs"><a href="#7-单个页面ejs" class="headerlink" title="7. 单个页面ejs"></a>7. 单个页面ejs</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">include</span> <span class="attr">partials</span>/<span class="attr">head.ejs</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">include</span> <span class="attr">partials</span>/<span class="attr">header.ejs</span> %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"hero-image-single"</span> <span class="attr">style</span>=<span class="string">"background-image: url('/images/&lt;%= movie.hero_image %&gt;');"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"hero-title"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">title</span> %&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-padding clearfix"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"poster-wrapper"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/images/&lt;%= movie.poster %&gt;"</span> <span class="attr">class</span>=<span class="string">"img-responsive"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"description-wrapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"description"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"movie-header"</span>&gt;</span>剧情介绍<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">movie.description</span> %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main-characters"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"movie-header"</span>&gt;</span>主要演员<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                &lt;% for (var i = 0; i &lt; main_characters.length; i++) &#123; %&gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">main_characters</span>[<span class="attr">i</span>] %&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">include</span> <span class="attr">partials</span>/<span class="attr">footer.ejs</span> %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">include</span> <span class="attr">partials</span>/<span class="attr">scripts.ejs</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-notFound-ejs"><a href="#8-notFound-ejs" class="headerlink" title="8. notFound.ejs"></a>8. notFound.ejs</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">include</span> <span class="attr">partials</span>/<span class="attr">head.ejs</span> %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">include</span> <span class="attr">partials</span>/<span class="attr">header.ejs</span> %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"hero-image-notFound"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"hero-title"</span>&gt;</span>内容走丢了！！！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">include</span> <span class="attr">partials</span>/<span class="attr">footer.ejs</span> %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">include</span> <span class="attr">partials</span>/<span class="attr">scripts.ejs</span> %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql插入中文字符显示为问号解决方法</title>
      <link href="/utf8mb4.html"/>
      <url>/utf8mb4.html</url>
      
        <content type="html"><![CDATA[<p>最近因为要用到mysql数据库，然后做一个关于产品分类的表格。在自己输入中文的时候发现都变成了问号，无法正常显示。自己上网去搜答案，基本上国内的解决方法都是一个样子的，比如：在[client]节点下添加</p><p>default-character-set=utf8 在[mysqld]节点下添加 character-set-server=utf8 collation-server=utf8_general_ci</p><p>类似这种，但是我自己在实践过程中发现一个问题就是，character_set_results ，character_set_client，character_set_connection这三个无法修改，character_set_system 默认就是utf8倒是不需要修改，character_set_server 从默认的latin1改成了utf8, 方法就是找到mysql的my.ini配置文件，添加character_set_server=utf8. <img src="http://www.webfront.online/wp-content/uploads/2017/03/error-300x245.png" alt=""> 网上说的改character_set_results ，character_set_client，character_set_connection， 操作类似于ALTER DATABASE website COLLATE ‘utf8_general_ci’ ，这个方法我自己不行。去搜了下，好像是因为utf8已经在新版本里面就被utf8mb4代替了，所以使用utf8_general_cli最后又自动变成了utf8md4_general_cli；</p><p>最后发现好像只需要修改对应row里面的排序规则为utf8就行了。。。如果是原来的latin1_swedish_ci，就不能正常显示中文了。 比如： <img src="http://www.webfront.online/wp-content/uploads/2017/03/mysql2-300x115.png" alt=""></p><blockquote><p>如果查看默认的字符串编码呢？<code>show variables like &#39;char%&#39;</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue devtools vue.js not detected</title>
      <link href="/vue-devtools-vue-js-not-detected.html"/>
      <url>/vue-devtools-vue-js-not-detected.html</url>
      
        <content type="html"><![CDATA[<p>Vue.js devtools是chrome浏览器的一款调试vue.js应用的开发者浏览器扩展。我用在360浏览器上面也行。可以边写边检查代码。</p><p>但是自己安装了之后，一直提示说vue js not detected,后来谷歌上找到了原因了：</p><ol><li>不能使用压缩版本的；</li><li>本地服务器上查看，比如localhost:3070， 而不是类似file:// 这种本地的;</li></ol>]]></content>
      
      
      <categories>
          
          <category> Vuejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vuejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Uncaught TypeError: a.indexOf is not a function</title>
      <link href="/uncaught-typeerror-a-indexof-is-not-a-function.html"/>
      <url>/uncaught-typeerror-a-indexof-is-not-a-function.html</url>
      
        <content type="html"><![CDATA[<p>今天实现一个预加载动画效果的时候，代码很简单，就是<code>$(window).load(function(){})</code>, 但是一直报错说Uncaught TypeError: a.indexOf is not a function，在jquery.min.js:4行。后来在stackoverflow上找到了答案。</p><p>因为jquery1.8版本以后不推荐直接绑定load, unload, error等事件，建议使用on来绑定事件。</p><p>原来的代码： <code>$(window).load(function(){...});</code></p><p>改成</p><p><code>$(window).on(&#39;load&#39;, function() { ... });</code></p><p>改成后面这种就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>webstorm sass CompatibilityError (Bug Report)</title>
      <link href="/webstorm-sass-compatibilityerror-bug-report.html"/>
      <url>/webstorm-sass-compatibilityerror-bug-report.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd.exe /D /C call scss.bat -E UTF-8 --no-cache --update main.scss:main.css Encoding::CompatibilityError: incompatible character encodings: GBK and UTF-8 Use --trace for backtrace.</span><br></pre></td></tr></table></figure><p>Process finished with exit code 1</p><p>今天敲代码的时候一直报这个错误，可是昨天自己也是这么使用的，就完全没问题。后来自己把文件夹全部删掉重新弄了，又正常了。不理解。</p><p>看stackoverflow上面人家说是路径的名字有问题，但是我重新建文件夹，名字也没改，又正常了。。。</p>]]></content>
      
      
      <categories>
          
          <category> SASS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SASS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Webstorm/Phpstorm将SCSS转化为CSS</title>
      <link href="/webstorm-css.html"/>
      <url>/webstorm-css.html</url>
      
        <content type="html"><![CDATA[<p>之前用sublime的时候，一直用的是考拉等编译工具，后来转webstorm之后，发现每次写scss的时候会提示是否添加watcher。总结一下，如果在webstorm以及phpstorm中添加watcher，然后再输入的时候就自动将scss文件编译成css.</p><a id="more"></a><h3 id="1-安装ruby，添加的环境变量"><a href="#1-安装ruby，添加的环境变量" class="headerlink" title="1. 安装ruby，添加的环境变量"></a>1. 安装ruby，添加的环境变量</h3><p>sass依赖于ruby环境,所以要先安装ruby, win + r 输入cmd,输ruby -v 如果出来了版本号，就证明电脑里面已经安装了，提示command not found,则表示需要安装;</p><p>去官网下载ruby installer来安装，注意勾选Add Ruby executables to your PATH这一项，这样就不用手动添加环境变量。万一忘记勾选， 手动添加的方法: 1. 点击桌面上的电脑图标； 2. 右键属性 3. 选择： 高级系统配置 4. 选择环境变量，会出来一个弹窗，在用户变量的选项中，点击path, 然后输入ruby的路径保存就可以了；</p><h3 id="2-SASS安装"><a href="#2-SASS安装" class="headerlink" title="2. SASS安装"></a>2. SASS安装</h3><p>ruby安装好之后，打开Start Command Prompt with Ruby 直接在命令行中输入 <code>gem install sass</code></p><h3 id="3-webstorm-phpstorm-设置"><a href="#3-webstorm-phpstorm-设置" class="headerlink" title="3. webstorm/phpstorm 设置"></a>3. webstorm/phpstorm 设置</h3><p>在WebStorm中创建scss文件时，会自动显示Watcher按钮，点击，在弹框中，将Program的路径设为Ruby中scss.bat的路径。 <img src="http://www.webfront.online/wp-content/uploads/2017/03/webstorm-1024x604.png" alt="webstorm sass"></p><blockquote><p>关于镜像安装：自己在使用gem install sass的时候经常报错，提示各种文件找不到，解决方法：可以通过gem sources命令来配置源，先移除默认的<a href="https://rubygems.org源，然后添加国内的源，比如https://ruby.taobao.org/" target="_blank" rel="noopener">https://rubygems.org源，然后添加国内的源，比如https://ruby.taobao.org/</a>, 然后再使用gem install sass就可以了。代码如下： <code>gem sources --remove https://rubygems.org/</code> <code>gem sources -a https://gems.ruby-china.org/</code> <code>gem install sass</code></p></blockquote><p><img src="http://www.webfront.online/wp-content/uploads/2017/03/sass-1-1024x411.png" alt="gem sass"></p>]]></content>
      
      
      <categories>
          
          <category> SASS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SASS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS index of整理</title>
      <link href="/js-index-of.html"/>
      <url>/js-index-of.html</url>
      
        <content type="html"><![CDATA[<p>整理一下indexOf用法以及注意事项。对于正则不熟悉的自己就是用来判断某个值是否则数组中，或者某个字符串是否包含某个子字符串等。</p><p>举个栗子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'test'</span>;</span><br><span class="line">str.indexOf(<span class="string">'t'</span>); <span class="comment">//0</span></span><br><span class="line">str.indexOf(<span class="string">'f); //-1</span></span><br></pre></td></tr></table></figure></p><p>不存在所以返回-1没啥好说的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str2 = <span class="string">'test123'</span>;</span><br><span class="line">str2.indexOf(<span class="number">1</span>); <span class="comment">//4</span></span><br></pre></td></tr></table></figure><p>这种情况下，indexOf传的参数是1，但是str2明明是字符串，为什么还是可以找到下标呢？因为字符串的这种，indexOf会做简单的类型转换，把数字转成string类型。</p><p>如果这样，number类型是否也会有类型转换呢？否。<br>如果非要比较，可以先显式转成字符串，然后再比较。比如 <code>let num = 0; num.toString()</code>或者 <code>(&#39;&#39; + num).indexOf()</code></p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>字体图标Iconfont使用笔记</title>
      <link href="/font-icon.html"/>
      <url>/font-icon.html</url>
      
        <content type="html"><![CDATA[<p>之前查看天猫源代码的时候，好奇它的图标是用sprite做的还是fontawesome那种使用class类名来。发现它的源代码这样写的 <code>&amp;lt;i class=&quot;iconfont icn&quot;&amp;gt;&amp;amp;#xe64b;&amp;lt;/i&amp;gt;</code>。 最近看了mooc的字体图标教程才明白，原来这种就是字体图标。</p><a id="more"></a><h3 id="1-为什么用字体图标？"><a href="#1-为什么用字体图标？" class="headerlink" title="1. 为什么用字体图标？"></a>1. 为什么用字体图标？</h3><p>便于后期管理，因为它的样式可以随意改变，比如color, font-size等; svg矢量图标, 所以不管是在手机还是电脑上都非常清晰； 兼容性，ie6都可以支持。</p><h3 id="2-如何免费定制自己的字体图标"><a href="#2-如何免费定制自己的字体图标" class="headerlink" title="2. 如何免费定制自己的字体图标"></a>2. 如何免费定制自己的字体图标</h3><p>去官网 <a href="https://icomoon.io/" target="_blank" rel="noopener">https://icomoon.io/</a>, 点击右上角iconmoon app图标进入图标选择页面，可以选中自己需要的图标，直接generate font，然后下载就可以了。</p><p>如果首页提供的免费字体不满足需求，可以去library加载更多的图标。</p><h3 id="3-实际使用"><a href="#3-实际使用" class="headerlink" title="3. 实际使用"></a>3. 实际使用</h3><p>下载到本地之后，就有一个fonts文件夹，里面就是我们的svg图标。 四种格式分别是EOT, WOFF, TTF, SVG， 因为不同浏览器对不同格式的支持不一样，所以为了保证兼容，使用font-face这个css3属性加载全部四种格式的图片。</p><blockquote><p>font-face虽然是css3中的属性，但是ie4中就已经支持了。</p></blockquote><p>font-family: 这里就是在html中的字体图标的类名。一般是用i标签来放图标，添加两个类名，一个放公共样式，一个放具体样式。 <code>&amp;lt;i class=&quot;iconfont icn&quot;&amp;gt;&amp;amp;#xe64b;&amp;lt;/i&amp;gt;</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">font-face</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"imooc-icon"</span>;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"../fonts/icomoon.eot"</span>); <span class="comment">/* IE9 兼容模式 */</span></span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"../fonts/icomoon.eot?#iefix"</span>) <span class="built_in">format</span>(<span class="string">"embedded-opentype"</span>)</span><br><span class="line">         ,<span class="built_in">url</span>(<span class="string">"../fonts/icomoon.woff"</span>) <span class="built_in">format</span>(<span class="string">"woff"</span>)</span><br><span class="line">         ,<span class="built_in">url</span>(<span class="string">"../fonts/icomoon.ttf"</span>) <span class="built_in">format</span>(<span class="string">"truetype"</span>)</span><br><span class="line">         ,<span class="built_in">url</span>(<span class="string">"../fonts/icomoon.svg"</span>) <span class="built_in">format</span>(<span class="string">"svg"</span>);</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.imooc-icon</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"imooc-icon"</span>;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">64px</span>;</span><br><span class="line">    <span class="attribute">-webkit-font-smoothing</span>: antialiased;</span><br><span class="line">    <span class="attribute">-moz-osx-font-smoothing</span>: grayscale;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vuejs入门笔记整理(二)选项与模版指令</title>
      <link href="/method.html"/>
      <url>/method.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-选项–data"><a href="#1-选项–data" class="headerlink" title="1. 选项–data"></a>1. 选项–data</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'hello, this is an example'</span></span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"> &lt;p&gt;&#123;&#123;a&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>在上面创建的Vue的实例化对象中，el绑定的就是html中的元素，在new Vue这个对象中，可以设置它的属性，最重要的包括，data,method, watch.其中数据data也是一个对象，可以在html页面中绑定data中的a，也可以通过this.a来绑定；</p><h3 id="2-选项—method"><a href="#2-选项—method" class="headerlink" title="2. 选项—method"></a>2. 选项—method</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'hello, this is an example'</span></span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: []</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    doSomething: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>methods就是可以执行的方法，这里执行了doSomething这个方法，打印this.a也就是data里面的那一个；</p><h3 id="3-选项—watch"><a href="#3-选项—watch" class="headerlink" title="3. 选项—watch"></a>3. 选项—watch</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">   el: <span class="string">'#app'</span>,</span><br><span class="line">   data: &#123;</span><br><span class="line">    message: <span class="string">'hello, this is an example'</span>,</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    doSomething: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.a++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="string">'a'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">val, oldVal</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(val, oldVal);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里的参数watch就相当于监听，’a’就是data里面的a,但是这个’a’表示监听所有a的变化，比如这里methods: a++; 那么watch就会监听a值的变化， 这里val新值，等于2,oldVal为1；</p><h3 id="4-模版指令"><a href="#4-模版指令" class="headerlink" title="4. 模版指令"></a>4. 模版指令</h3><p>什么是模版指令？它是vue对象与html之间的粘合剂，建立两者之间的联系。常见的有if判断，for循环，on事件绑定，band属性绑定等;</p><ul><li>4.1. 模版指令—v-if</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-<span class="keyword">if</span>=<span class="string">"isShow"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;p v-show=<span class="string">"isShow"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    isShow: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里的v-if v-show都是通过判断isShow的布尔值来决定是否显示，区别在v-if如果否定，直接不渲染dom元素，但是v-show只是通过display:none让它不显示，实际还是渲染了的；</p><ul><li>4.2. 模版指令—v-on</li></ul><p>v-on是进行事件绑定，比如给button绑定点击事件，第一行代码也可以直接下面@click这种形式，当button点击之后就可以执行doThing这个方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;button v-on:click=<span class="string">"doThing"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    &lt;button @click=<span class="string">"doThing"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">     methods: &#123;</span><br><span class="line">    doThing: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="5-模版指令—v-for"><a href="#5-模版指令—v-for" class="headerlink" title="5. 模版指令—v-for"></a>5. 模版指令—v-for</h3><p>循环指令，语法如下，item表示里面的每一项，in后面接的相当于变量名字，这种情况会输出one, two两个字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">     &lt;li v-<span class="keyword">for</span>=<span class="string">"item in items"</span>&gt;</span><br><span class="line">      &lt;p v-text=<span class="string">"item.label"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">     &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">  items: [</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'one'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'two'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-属性绑定—v-band"><a href="#6-属性绑定—v-band" class="headerlink" title="6. 属性绑定—v-band"></a>6. 属性绑定—v-band</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"imageSrc"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123;red: isRed&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[class1, class2]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第一个绑定了src路径，第二个添加class,注意如果里面是对象，那么isRed的布尔值来决定red属性是否添加，如果是数组，则表示添加class1,class2这两个。</p>]]></content>
      
      
      <categories>
          
          <category> Vuejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vuejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vuejs入门笔记整理(一)介绍及安装</title>
      <link href="/vuejs-e5-85-a5-e9-97-a8-e7-ac-94-e8-ae-b0-e6-95-b4-e7-90-86-e4-b8-80-e4-bb-8b-e7-bb-8d-e5-8f-8a-e5-ae-89-e8-a3-85.html"/>
      <url>/vuejs-e5-85-a5-e9-97-a8-e7-ac-94-e8-ae-b0-e6-95-b4-e7-90-86-e4-b8-80-e4-bb-8b-e7-bb-8d-e5-8f-8a-e5-ae-89-e8-a3-85.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-关于vue-js"><a href="#1-关于vue-js" class="headerlink" title="1. 关于vue.js"></a>1. 关于vue.js</h3><p>轻量级的前端框架, 吸收了react组件化概念,实现数据和展现的分离，以及angular的指令和对页面的操作方法。【来自官网】：Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。</p><p>（整理笔记来自mooc课程）</p><h3 id="2-如何安装？"><a href="#2-如何安装？" class="headerlink" title="2. 如何安装？"></a>2. 如何安装？</h3><p><code>cnpm install -g vue-cli</code><br><code>vue init webpack my-project</code><br><code>cd my-project</code><br><code>cpnm isntall</code><br><code>npm run dev</code></p><blockquote><p>这里cnpm install是用的淘宝镜像的安装方法，全局安装了vue,这样速度快，随后vue init webpack my-project就是初始化下载了一个vue的模版，命名为my-project， cd就是进入到那个my-project路径， cnpm install是因为文件夹里面有package.json文件，里面写清楚了所有的依赖包，可以直接通过cnpn install一键下载所有包 npm run dev就可以开启一个服务器，比如localhost:8080 可以在浏览器中打开;</p></blockquote><h3 id="3-从从-vue到页面"><a href="#3-从从-vue到页面" class="headerlink" title="3. 从从*.vue到页面"></a>3. 从从*.vue到页面</h3><p>.vue 通过webpack打包成html, js, css、其中js就是一个新的vue对象；</p><p>常在 .vue文件中红看到 <template></template> <script></script> <style><br></style> 其中template就相当于是html, script就是js， style就是css</p>]]></content>
      
      
      <categories>
          
          <category> Vuejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vuejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jQuery加入购物车飞入特效</title>
      <link href="/cart.html"/>
      <url>/cart.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>效果分析：点击加入购物车，产品图标变小飞入购物车图标，最终消失`<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.btn'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> cart = $(<span class="string">'.cart img'</span>),</span><br><span class="line">                imgToAdd = $(<span class="keyword">this</span>).parent(<span class="string">'.container'</span>).find(<span class="string">'.item'</span>).eq(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(imgToAdd)&#123;</span><br><span class="line">                <span class="keyword">var</span> imgClone = imgToAdd.clone();</span><br><span class="line">                    imgClone.offset(&#123;</span><br><span class="line">                         top: imgToAdd.offset().top,</span><br><span class="line">                         left: imgToAdd.offset().left</span><br><span class="line">                    &#125;).css(&#123;</span><br><span class="line">                        <span class="string">'opacity'</span>: <span class="string">'0.5'</span>,</span><br><span class="line">                        <span class="string">'position'</span>: <span class="string">'absolute'</span>,</span><br><span class="line">                        <span class="string">'height'</span>: <span class="string">'150px'</span>,</span><br><span class="line">                        <span class="string">'width'</span>: <span class="string">'150px'</span>,</span><br><span class="line">                        <span class="string">'z-index'</span>: <span class="string">'100'</span></span><br><span class="line">                    &#125;).appendTo($(<span class="string">'body'</span>))</span><br><span class="line">                        .animate(&#123;</span><br><span class="line">                        <span class="string">'top'</span>: cart.offset().top + <span class="number">10</span>,</span><br><span class="line">                        <span class="string">'left'</span>: cart.offset().left + <span class="number">10</span>,</span><br><span class="line">                        <span class="string">'width'</span>: <span class="number">85</span>,</span><br><span class="line">                        <span class="string">'height'</span>: <span class="number">85</span></span><br><span class="line">                    &#125;,<span class="number">1000</span>, <span class="string">'easeInOutExpo'</span>);</span><br><span class="line"></span><br><span class="line">                    imgClone.animate(&#123;</span><br><span class="line">                        <span class="string">'width'</span>: <span class="number">0</span>,</span><br><span class="line">                        <span class="string">'height'</span>: <span class="number">0</span></span><br><span class="line">                    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                        $(<span class="keyword">this</span>).remove()</span><br><span class="line">                    &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p></blockquote><ul><li>首先获取加入购物车按钮以及产品图片，</li><li>赋值产品图片，并设置对应的宽度，高度，top,left值，并且插入到dom中，利用animate给图片加动画效果</li><li>最后图片加入购物车消失之后，用detach()将节点删除</li><li>easeInOutExpo用得是jquery.easing插件</li></ul>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux中常用操作命令</title>
      <link href="/linux.html"/>
      <url>/linux.html</url>
      
        <content type="html"><![CDATA[<p>整理下在建站过程中常用到的命令：</p><a id="more"></a><p>ls　　</p><p>显示当前文件夹下所有的文件</p><p>mkdir</p><p>创建一个新文件夹 ( make a directory )</p><p>cd</p><p>切换路径 ( change direcoty )</p><p>touch</p><p>创建一个空文件</p><p>vi</p><p>查看文件内容</p><p>mv</p><p>移动文件</p><p>rm</p><p>删除文件</p><p>rmdir</p><p>删除空目录</p><p>pwd</p><p>显示当前目录</p><p>:q</p><p>退出文件</p>]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何使用淘宝cnpm镜像</title>
      <link href="/cnpm.html"/>
      <url>/cnpm.html</url>
      
        <content type="html"><![CDATA[<p>之前发现一个问题就是每次npm都超级慢，后来看到网上大家都说用淘宝镜像，找了一些资料安装后，发现的确快多了。整理下笔记。</p><a id="more"></a><h2 id="通过cnpm来使用"><a href="#通过cnpm来使用" class="headerlink" title="通过cnpm来使用"></a>通过cnpm来使用</h2><p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p><p>在终端输入了之后，以后碰到npm，直接用cnpm代替就好， 比如 <code>cnpm install -g vue-cli</code></p><h2 id="暂时性使用"><a href="#暂时性使用" class="headerlink" title="暂时性使用"></a>暂时性使用</h2><p>当然如果只是暂时用一下，也可以这样：</p><p><code>npm --registry https://registry.npm.taobao.org install express</code></p>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jQuery实现弹幕特效</title>
      <link href="/window.html"/>
      <url>/window.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>弹幕的关键是根据用户输入内容，生成对应随机的颜色，随机字体大小以及在屏幕中随机，然后依次从右到左显示，然后消失;</p></blockquote><p><strong>第一步：Html结构</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"一起来吐槽吧"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>div.box这里是显示弹幕文字，CSS样式要设置position: relative, 因为弹幕文字要添加position:absolute,生成在屏幕中随机的高度;</p><p><strong>*第二步：获取发送按钮，并且绑定事件，这里增加判断，如果按下enter键，也要触发提交事件</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $btn = $(<span class="string">'btn'</span>);</span><br><span class="line">$btn.on(<span class="string">'clck'</span>, sendMessage);</span><br><span class="line">$(<span class="built_in">document</span>).keyup(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(e.keycode ==<span class="number">13</span>)&#123;</span><br><span class="line">     $btn.trigger(<span class="string">'click'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong>第三步：发送弹幕之sendMessage函数</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendMessage</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">      e.preventDefault();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> $value = $(<span class="string">'#text'</span>).val();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> $p = $(<span class="string">'&lt;p&gt;&lt;/p&gt;'</span>);</span><br><span class="line">      $p.text($value);</span><br><span class="line">      $p.addClass(<span class="string">'p'</span>);</span><br><span class="line">      $(<span class="string">'#text'</span>).val(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> top = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*($(<span class="string">'.box'</span>).innerHeight()<span class="number">-40</span>));</span><br><span class="line">      <span class="keyword">var</span> fontSize = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">30</span>) + <span class="number">10</span>;</span><br><span class="line">      <span class="keyword">var</span> color = <span class="string">'rgb('</span>+<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">225</span>)+<span class="string">','</span>+<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">225</span>)+<span class="string">','</span>+<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">225</span>)+<span class="string">')'</span>;</span><br><span class="line"></span><br><span class="line">      $p.css(&#123;</span><br><span class="line">         <span class="string">"top"</span>: top,</span><br><span class="line">          <span class="string">"font-size"</span>: fontSize,</span><br><span class="line">          <span class="string">"color"</span>: color</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">'.box'</span>).append($p);</span><br><span class="line">      <span class="keyword">var</span> timer = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random()*<span class="number">4000</span>)+<span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">      $p.stop().animate(&#123;</span><br><span class="line">          <span class="string">"left"</span>: <span class="string">"-10px"</span></span><br><span class="line">      &#125;,timer,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         $(<span class="keyword">this</span>).remove();</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//stop 防止： 上一个事件还没结束，就触发了下一个事件，可能导致，比如你鼠标已经移开了，但是你动画效果还在继续；</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><ul><li>首先要获取用户输入的内容: <code>var $value = $(&#39;#text&#39;).val();</code></li><li>其次动态创建p标签，然后设置内容为用户输入内容，增加一个.p的类来控制样式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $p = $(<span class="string">'&lt;p&gt;&lt;/p&gt;'</span>);</span><br><span class="line">$p.text($value);</span><br><span class="line">$p.addClass(<span class="string">'p'</span>);</span><br></pre></td></tr></table></figure><ul><li>增加一个.p的class类来控制样式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.p &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top:0;</span><br><span class="line">    left:400px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在用户提交了之后，要清空原来input框里面的内容； <code>$(&#39;#text&#39;).val(&#39;&#39;);</code></p></li><li><p>去掉默认按钮点击事件，禁止表单提交; <code>e.preventDefault();</code></p></li><li><p>接下来用Math.random方法生成一些随机数据，包括颜色，字体大小，高度等, 存在变量中;</p></li><li><p>随机变量设置成CSS；并且把内容插入到dom中；</p></li><li><p>设置动画函数，使得p从右边向左边滚动然后消息；</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$p.stop().animate(&#123; <span class="string">"left"</span>: <span class="string">"-10px"</span> &#125;,timer,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; $(<span class="keyword">this</span>).remove(); &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>原生JS实现在线问卷答题</title>
      <link href="/quiz.html"/>
      <url>/quiz.html</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>通过实际项目来学习JS系列之原生JS实现在线问卷: 二维数组，动态渲染html，字符串拼接</strong><br><a id="more"></a></p></blockquote><blockquote><p><a href="https://calinas.github.io/simplequiz/" target="_blank" rel="noopener">在线演示</a></p><p><a href="https://github.com/Calinas/simplequiz/tree/gh-pages" target="_blank" rel="noopener">源码下载</a></p></blockquote><ul><li>获取题目和答案，可以通过定义一个多维数组来储存;</li><li>动态把问题和答案渲染到html页面；</li><li>在用户做完所有题目之后，点击提交，最后显示总分数;</li><li>在用户点击进入下一题的时候，同时页面要显示此时对应题目索引，即当前为第几道题；</li></ul><p><strong>第一步</strong>： 定义相关变量;<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pos = <span class="number">0</span>, <span class="comment">//索引，用来判断当前位于第几题</span></span><br><span class="line">   test, <span class="comment">//渲染的题目放在test里</span></span><br><span class="line">   testStatus, <span class="comment">//状态：比如最后显示答对几道题;</span></span><br><span class="line">   question,  <span class="comment">//题目</span></span><br><span class="line">   choices,   <span class="comment">//正确答案</span></span><br><span class="line">   chA,   <span class="comment">//四个选项</span></span><br><span class="line">   chB,</span><br><span class="line">   chC,</span><br><span class="line">   chD,</span><br><span class="line">   correct = <span class="number">0</span>;  <span class="comment">//正确答案数量，初始化为0;</span></span><br></pre></td></tr></table></figure></p><p><strong>第二步</strong>： 1. 创建二维数组用来储存问题和答案<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> questions = [</span><br><span class="line">    [ <span class="string">"What is 10 + 4?"</span>, <span class="string">"12"</span>, <span class="string">"14"</span>, <span class="string">"16"</span>, <span class="string">"B"</span> ],</span><br><span class="line">    [ <span class="string">"What is 20 - 9?"</span>, <span class="string">"7"</span>, <span class="string">"13"</span>, <span class="string">"11"</span>, <span class="string">"C"</span> ],</span><br><span class="line">    [ <span class="string">"What is 7 x 3?"</span>, <span class="string">"21"</span>, <span class="string">"24"</span>, <span class="string">"25"</span>, <span class="string">"A"</span> ],</span><br><span class="line">    [ <span class="string">"What is 8 / 2?"</span>, <span class="string">"10"</span>, <span class="string">"2"</span>, <span class="string">"4"</span>, <span class="string">"C"</span> ]</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><p>2. 封装一个快速获取id的方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>第三步： 创建动态渲染页面函数</strong>;<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;pre&gt;<span class="string">`function renderQuestion()&#123;</span></span><br><span class="line"><span class="string">test = $("test");</span></span><br><span class="line"><span class="string">testStatus = $("testStatus");</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">testStatus.innerHTML = "Question "+(pos+1)+" of " + questions.length;</span></span><br><span class="line"><span class="string">question = questions[pos][0];</span></span><br><span class="line"><span class="string">chA = questions[pos][1];</span></span><br><span class="line"><span class="string">chB = questions[pos][2];</span></span><br><span class="line"><span class="string">chC = questions[pos][3];</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">test.innerHTML = "&amp;lt;h3&amp;gt;"+question+"&amp;lt;/h3&amp;gt;";</span></span><br><span class="line"><span class="string">test.innerHTML += "&amp;lt;input type='radio' name='choices' value='A'&amp;gt; "+chA+"&amp;lt;br&amp;gt;";</span></span><br><span class="line"><span class="string">test.innerHTML += "&amp;lt;input type='radio' name='choices' value='B'&amp;gt; "+chB+"&amp;lt;br&amp;gt;";</span></span><br><span class="line"><span class="string">test.innerHTML += "&amp;lt;input type='radio' name='choices' value='C'&amp;gt; "+chC+"&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;";</span></span><br><span class="line"><span class="string">test.innerHTML += "&amp;lt;button onclick='checkAnswer()'&amp;gt;提交&amp;lt;/button&amp;gt;";</span></span><br></pre></td></tr></table></figure></p><p><strong>第四步</strong>: 获取选中的值，存放在变量choice中，将选中的然后正确答案对比，选中，则分数加一 ，且pos ++（位置加一，比如从第一题到第二题），渲染下一个题目<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;pre&gt;<span class="string">`function checkAnswer()&#123;</span></span><br><span class="line"><span class="string">choices = document.getElementsByName("choices");</span></span><br><span class="line"><span class="string">for(var i=0; i&amp;lt;choices.length; i++)&#123;</span></span><br><span class="line"><span class="string">    if(choices[i].checked)&#123;</span></span><br><span class="line"><span class="string">        choice = choices[i].value;</span></span><br><span class="line"><span class="string">        //获取答案</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">//判断提交答案是否等于正确答案；</span></span><br><span class="line"><span class="string">if(choice == questions[pos][4])&#123;</span></span><br><span class="line"><span class="string">    correct++;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">pos++;</span></span><br><span class="line"><span class="string">renderQuestion();</span></span><br></pre></td></tr></table></figure></p><p><strong>第五步：判断是否到最后一题</strong> - 如果pos等于questions.length，则证明已经到了最后，那么就应该计算分数，并且显示出来 - 如果结束了，就应该return false, 这样后面的问题就不会再出现；<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;pre&gt;<span class="string">`if(pos &amp;gt;=questions.length)&#123;</span></span><br><span class="line"><span class="string">    test.innerHTML = "&amp;lt;h2&amp;gt;you got "+correct+" of "+questions.length+" question correct&amp;lt;/h2&amp;gt;";</span></span><br><span class="line"><span class="string">    testStauts.innerHTML = "完成挑战";</span></span><br><span class="line"><span class="string">    pos = 0;</span></span><br><span class="line"><span class="string">    correct = 0;</span></span><br><span class="line"><span class="string">    return false; </span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></p><p><strong>PS</strong></p><blockquote><p>因为html页面内容都是js动态渲染过去的，页面本身没内容，所以window一加载，就进行事件监听，绑定renderQuestion函数，这样才可以显示问题; <code>window.addEventListener(&quot;load&quot;,renderQuestion);</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>chrome devtool技巧总结</title>
      <link href="/flexbox.html"/>
      <url>/flexbox.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> CSS3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>chrome devtool技巧总结</title>
      <link href="/chrome-devtool-1.html"/>
      <url>/chrome-devtool-1.html</url>
      
        <content type="html"><![CDATA[<p>整理一下最近搜集的以及平时项目中使用到的一些tips。F12或者在网页中鼠标右键检查可以打开devtool控制台</p><h3 id="Element-隐藏和显示某个片段代码"><a href="#Element-隐藏和显示某个片段代码" class="headerlink" title="Element 隐藏和显示某个片段代码"></a>Element 隐藏和显示某个片段代码</h3><p>在网页中找到目标，鼠标右键检查可以在element中定位到对应代码，按h可以进行 隐藏/显示的操作。也可以直接 del 进行删除</p><h3 id="查看元素hover-focus等状态的变化"><a href="#查看元素hover-focus等状态的变化" class="headerlink" title="查看元素hover,focus等状态的变化"></a>查看元素hover,focus等状态的变化</h3><p><img src="https://img.mukewang.com/5660fa130001655300080016.gif" alt=""></p><h3 id="color-picker"><a href="#color-picker" class="headerlink" title="color picker"></a>color picker</h3><p>在devtool的样式编辑器里面点击笔按钮，可以获取网页上点击区域的颜色<br><img src="https://img.mukewang.com/5660f9f40001554600010001.gif" alt=""></p><h3 id="文件切换"><a href="#文件切换" class="headerlink" title="文件切换"></a>文件切换</h3><p>以前想看线上引用的某个js文件，都是先找到source面板。后来发现开发者工具中使用ctrl + p 可以快速寻找该项目的任意文件。<br><img src="https://img.mukewang.com/5660f81e00018ad600010001.gif" alt=""></p><h3 id="搜索任意方法"><a href="#搜索任意方法" class="headerlink" title="搜索任意方法"></a>搜索任意方法</h3><p>ctrl + shift + f 就可在该项目中搜索任意方法等，也支持正则哦</p><p><img src="https://img.mukewang.com/5660f83d000156ca00010016.gif" alt=""></p><h3 id="跳转到任意行数"><a href="#跳转到任意行数" class="headerlink" title="跳转到任意行数"></a>跳转到任意行数</h3><p>ctrl + g</p><h3 id="console-log-DOM选择"><a href="#console-log-DOM选择" class="headerlink" title="console.log DOM选择"></a>console.log DOM选择</h3><ul><li>$() - document.querySelector()的缩写，返回dom中第一个与选择器匹配的元素</li><li>$$() - document.querySelectorAll()的缩写，返回dom中与选择器匹配的所有元素，是个数组</li><li>$0 依次返回五个最近你在元素面板选择过的DOM元素的历史记录</li></ul><h3 id="使压缩的js可读"><a href="#使压缩的js可读" class="headerlink" title="使压缩的js可读"></a>使压缩的js可读</h3><p><img src="https://img.mukewang.com/5660f939000145bc00010001.gif" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> CSS3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS3动画(一)实现圣诞闪烁灯光效果</title>
      <link href="/animate.html"/>
      <url>/animate.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://www.webfront.online/wp-content/uploads/2017/02/light-1.gif" alt=""></p><p><strong>1.首先创建一个container装动态html</strong><br><code>&lt;div id=&quot;lights&quot;&gt;&lt;/div&gt;</code></p><p><strong>2.设置CSS公共样式，每一个灯添加.bulb类名，增加样式</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bulb</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">100%</span> <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-45deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p><strong>3.设置单个灯不同样式</strong></p><blockquote><p>因为要形成闪烁效果，所以按道理基数和偶数位上的颜色不一样；基数上的是从opacity:1 到.3变化</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bulb</span><span class="selector-pseudo">:nth-child(odd)</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#6cb6ff</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">15px</span> <span class="number">#6cb6ff</span>, -<span class="number">1px</span> -<span class="number">1px</span> <span class="number">15px</span> <span class="number">#6cb6ff</span>;</span><br><span class="line">  <span class="attribute">animation</span>: bulb-pulse-<span class="number">1</span> <span class="number">0.8s</span> linear <span class="number">0s</span> infinite alternate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>偶数位上的颜色和基数位上的相反，透明度从.3变成1；</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bulb</span><span class="selector-pseudo">:nth-child(odd)</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#6cb6ff</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">15px</span> <span class="number">#6cb6ff</span>, -<span class="number">1px</span> -<span class="number">1px</span> <span class="number">15px</span> <span class="number">#6cb6ff</span>;</span><br><span class="line">  <span class="attribute">animation</span>: bulb-pulse-<span class="number">1</span> <span class="number">0.8s</span> linear <span class="number">0s</span> infinite alternate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.设置keyframes无限运动 (box-shadow和透明度变化)</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> bulb-pulse-<span class="number">1</span> &#123;</span><br><span class="line"><span class="selector-tag">from</span> &#123;<span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">15px</span> <span class="number">#6cb6ff</span>,-<span class="number">1px</span> -<span class="number">1px</span> <span class="number">15px</span> <span class="number">#6cb6ff</span>;<span class="attribute">opacity</span>: <span class="number">1</span>;&#125;</span><br><span class="line"><span class="selector-tag">to</span> &#123;<span class="attribute">box-shadow</span>: none; <span class="attribute">opacity</span>: .<span class="number">3</span>;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@<span class="keyword">keyframes</span> bulb-pulse-<span class="number">2</span> &#123;</span><br><span class="line"><span class="selector-tag">from</span> &#123;<span class="attribute">box-shadow</span>: none; <span class="attribute">opacity</span>: .<span class="number">3</span>;&#125;</span><br><span class="line"><span class="selector-tag">to</span> &#123;<span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">15px</span> <span class="number">#0c0</span>,-<span class="number">1px</span> -<span class="number">1px</span> <span class="number">15px</span> <span class="number">#0c0</span>;<span class="attribute">opacity</span>: <span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>5.（进阶）创建random角度</strong></p><blockquote><p>以上效果基本实现了案例，但是如果想生成随机的颜色，或者随机角度，让每个灯具角度不一样，可以使用Math.random生成一个随机数，然后赋值;</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CSS3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>页面预加载动画preloader</title>
      <link href="/preload.html"/>
      <url>/preload.html</url>
      
        <content type="html"><![CDATA[<p>实现效果： 页面内容加载完之前，先添加一个动画效果，告诉用户页面内容正在加载，等内容加载完之后，隐藏动画，正常显示页面内容。 可以用css3, html生成动画效果，这里直接引入一个gif动画。</p><a id="more"></a><p>html:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;preloader&quot; id=&quot;preloader&quot;&gt;</span><br><span class="line">        &lt;img src=&quot;img/preloader.gif&quot; alt=&quot;preloader&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure></p><pre><code>css:</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.preloader</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0%</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fbfbfb</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.preloader</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>jquery:</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> $(<span class="built_in">window</span>).on(<span class="string">'load'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"> $(<span class="string">'#preloader'</span>).remove();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>注意这里没用直接使用<code>$(document).ready(function(){})</code>或者<code>$(function(){})</code>, 是因为前两者指的是浏览器把网页解析为dom树之后就执行，而<code>$(window).on(&#39;load&#39;,function(){})</code>, 而是网页内容全部加载完成后才执行，包括图片等。后者的加载的事件要长些</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jQuery实现滚动导航栏</title>
      <link href="/scroll-nav.html"/>
      <url>/scroll-nav.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>电商网站基本上都可以看到滚动导航栏，随着用户下拉滚动，导航对应楼层高亮显示。实现思路：(总结自mooc网教程)首先要设置一个当前锚点为currentId, 然后获取用户已经滚动的高度，将滚动高度与每一个楼层的距离顶部的高度进行对比，来判断已经滚动到哪一楼层了，然后获取滚动到的楼层的currentId。获取了正确锚点的currentId之后要判断高亮显示的楼层是否是正确的，如果不正确，则去掉默认高亮显示，给对的currentId楼层添加高亮样式。</p></blockquote><h3 id="1-页面结构"><a href="#1-页面结构" class="headerlink" title="1. 页面结构"></a>1. 页面结构</h3><a id="more"></a><p>页面结构很简单，没啥好说的，总之，对应导航内a标签要设置href = #item1<br>对应楼层div要设置id = item1<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#item1"</span> <span class="attr">class</span>=<span class="string">"current"</span>&gt;</span>1F 男装<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"item1"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="2-逻辑实现"><a href="#2-逻辑实现" class="headerlink" title="2. 逻辑实现"></a>2. 逻辑实现</h3><p>事件监听，但页面开始滚动的时候执行函数</p><p><code>$(window).scroll(function(){   })</code></p><p>获取对应变量，包括a锚链接导航以及对应楼层div</p><p><code>var staris = $(&#39;#items div&#39;)</code></p><p>获取滚动高度，设置变量currentId<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scrollTop = $(<span class="built_in">window</span>).scrollTop();</span><br><span class="line"><span class="keyword">var</span> currentId = <span class="string">''</span>;</span><br></pre></td></tr></table></figure></p><p>循环所有楼层，将每个楼层的高度和scrollTop进行对比，从而获取currentId;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">stairs.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">if</span>(scrollTop &gt; $<span class="keyword">this</span>.offset().top <span class="number">-200</span>)&#123;</span><br><span class="line">          currentId = <span class="string">'#'</span> + $<span class="keyword">this</span>.attr(<span class="string">'id'</span>);</span><br><span class="line">          &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>把实际currentId与默认获取高亮样式的a的currentIId进行对比，如果不相等,则证明当前高亮楼层不对，先找到有正确currentId的a, 然后再添加高亮样式；<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> current = menu.find(<span class="string">'.current'</span>);</span><br><span class="line">    <span class="keyword">if</span>(current.attr(<span class="string">'href'</span>)!=currentId)&#123;</span><br><span class="line">        current.removeClass(<span class="string">'current'</span>);</span><br><span class="line">        menu.find(<span class="string">'[href='</span>+currentId+<span class="string">']'</span>).addClass(<span class="string">'current'</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP入门笔记整理(三)GET POST</title>
      <link href="/get-post.html"/>
      <url>/get-post.html</url>
      
        <content type="html"><![CDATA[<p>get这个和ajax中概念差不多，就是处理那些把搜索值直接放在url里面，post则一般是表单涉及到用户名密码这些的。</p><a id="more"></a><h3 id="1-POST"><a href="#1-POST" class="headerlink" title="1. $_POST"></a>1. $_POST</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  $content = $_POST[<span class="string">'content'</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">`&lt;/pre&gt;</span><br></pre></td></tr></table></figure><pre><code>the content you enter was &lt;?php echo $content;?&gt;</code></pre><p>这里随着输入input的内容变化，p段落里面的$content也会变化</p><h3 id="2-GET"><a href="#2-GET" class="headerlink" title="2. $_GET"></a>2. $_GET</h3><p>通过url来获取。</p><p>html页面：</p><p><code>&lt;a href=&quot;get.php?user_id=10&quot;&gt;user id is&lt;/a&gt;</code></p><pre><code>php： </code></pre><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">          $user_id = $_GET[<span class="string">'user_id'</span>];</span><br><span class="line">          <span class="keyword">echo</span> <span class="string">"the user id you have choosen is $user_id"</span>;</span><br><span class="line">        <span class="meta">?&gt;</span> </span><br><span class="line">```    </span><br><span class="line">但我们点击a标签，链接就会转到对应的get.php?user_id=<span class="number">10</span>，会获取url的user_id，然后<span class="keyword">echo</span>到页面；</span><br><span class="line"></span><br><span class="line"><span class="comment">### 3. 增加判断</span></span><br><span class="line"></span><br><span class="line">以上很多都是把获取到的数据放在变量中，万一这个变量没有成功获取到内容，就会导致Undefined报错，所以可以增加一个前提判断，只有当数据存在的时候，才执行。这里用<span class="keyword">isset</span>来执行判断。</span><br><span class="line">```php</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'user_id'</span>])) &#123;</span><br><span class="line">       $user_id = $_GET[<span class="string">'user_id'</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">"User ID not set"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP入门笔记整理(三)数组</title>
      <link href="/array.html"/>
      <url>/array.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-创建数组"><a href="#1-创建数组" class="headerlink" title="1. 创建数组"></a>1. 创建数组</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $employee1 = <span class="keyword">array</span>(<span class="string">"Michael"</span>,<span class="string">"Tompson"</span>,<span class="string">"51687"</span>,<span class="string">"26000"</span>);</span><br><span class="line">    $count = count($employee1);</span><br><span class="line">    <span class="comment">//count可以获取这个数组的长度;</span></span><br><span class="line">    <span class="keyword">for</span>($x=<span class="number">0</span>;$x&lt;$count;$x++)&#123;</span><br><span class="line">       <span class="keyword">echo</span> $employee1[$x].<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>这样利用for循环就输出了数组的每一项；</p><h3 id="2-二维数组"><a href="#2-二维数组" class="headerlink" title="2. 二维数组"></a>2. 二维数组</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $employee1 = <span class="keyword">array</span>(<span class="string">"Michael"</span>,<span class="string">"Tompson"</span>,<span class="string">"51687"</span>,<span class="string">"26000"</span>);</span><br><span class="line">    $employee2 = <span class="keyword">array</span>(<span class="string">"james"</span>,<span class="string">"arefefe"</span>,<span class="string">"19876"</span>,<span class="string">"49857"</span>);</span><br><span class="line">    $employee3 = <span class="keyword">array</span>(<span class="string">"Hnery"</span>,<span class="string">"jane"</span>,<span class="string">"29876"</span>,<span class="string">"79857"</span>);</span><br><span class="line">    $employees = <span class="keyword">array</span>($employee1, $employee2, $employee3);</span><br><span class="line"></span><br><span class="line">    $employees_count = count($employees);</span><br><span class="line">    <span class="keyword">for</span>($y=<span class="number">0</span>;$y&lt;$employees_count;$y++)&#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">"&lt;h3&gt;Details"</span>.($y+<span class="number">1</span>).<span class="string">"&lt;/h3&gt;"</span>;</span><br><span class="line">       <span class="keyword">for</span>($x=<span class="number">0</span>;$x&lt;$employees_count;$x++)&#123;</span><br><span class="line">          <span class="keyword">echo</span> $employees[$y][$x].<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>首先创建了三个数组，然后再把这三个数组又嵌套在另一个数组里面，利用coun获取数组长度，循环了两次；</p><p>如果我们想给数组添加描述，比如值对的形式，该怎么写？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  $employee1 = <span class="keyword">array</span>(<span class="string">'Firstname'</span> =&gt; <span class="string">"Michael"</span>,<span class="string">'Lastname'</span> =&gt; <span class="string">"Thompson"</span>,<span class="string">'Payroll ID'</span> =&gt; <span class="string">"51687"</span>,<span class="string">'Salary'</span> =&gt; <span class="string">"26000"</span>);</span><br><span class="line">  $employee2 = <span class="keyword">array</span>(<span class="string">'Firstname'</span> =&gt; <span class="string">"James"</span>,<span class="string">'Lastname'</span> =&gt; <span class="string">"Rasmussen"</span>,<span class="string">'Payroll ID'</span> =&gt; <span class="string">"19875"</span>,<span class="string">'Salary'</span> =&gt; <span class="string">"15000"</span>);</span><br><span class="line"> $employee3 = <span class="keyword">array</span>(<span class="string">'Firstname'</span> =&gt; <span class="string">"Henry"</span>,<span class="string">'Lastname'</span> =&gt; <span class="string">"Foggett"</span>,<span class="string">'Payroll ID'</span> =&gt; <span class="string">"19810"</span>,<span class="string">'Salary'</span> =&gt; <span class="string">"150000"</span>);</span><br><span class="line"> $employees = <span class="keyword">array</span>($employee1,$employee2,$employee3);</span><br><span class="line"> <span class="comment">//这个打印出来的是第一个数组的数据</span></span><br><span class="line"> <span class="keyword">foreach</span>($employee1 <span class="keyword">as</span> $key =&gt; $value)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $key . <span class="string">":"</span> .$value.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//获取数组长度</span></span><br><span class="line"> $employees_count = count($employees);</span><br><span class="line">   <span class="keyword">for</span>($x=<span class="number">0</span>;$x&lt;$employees_count;$x++)&#123;</span><br><span class="line">    <span class="keyword">foreach</span>($employees[$x] <span class="keyword">as</span> $key =&gt; $value)&#123;</span><br><span class="line">        <span class="keyword">echo</span> $key.<span class="string">":"</span>.$value.<span class="string">"&lt;br&gt;"</span>;       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>; </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>教你四招！提高自学效率</title>
      <link href="/learn-1.html"/>
      <url>/learn-1.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Till H. Groß是德国一个牛逼的22岁心理治疗师，他通过自学获取了全奖学金，去世界Top 10大学进行交换生学习。他曾在TED舞台分享了的学习方法。以下文章编译自他TED的一篇演讲，4 steps to design your own education.</p></blockquote><h3 id="Intro-Is-university-overrated-（大学教育是否被过誉了？）"><a href="#Intro-Is-university-overrated-（大学教育是否被过誉了？）" class="headerlink" title="Intro: Is university overrated ?（大学教育是否被过誉了？）"></a>Intro: Is university overrated ?（大学教育是否被过誉了？）</h3><a id="more"></a><p>Till高中毕业就已经十分确定自己的目标就是做一个出色的心理治疗师，但当他进入大学之后，发现一切和他想象的不一样。</p><ul><li>首先大学老师课上完课就走人</li><li>大学教育更多的是如何更好地完成考试而不是教授一些实际技能</li><li>他的同学们并没有和他一起努力，只是在抱怨和虚度时间。</li></ul><p>在这种情况下，他做了一个决定，一方面要继续认真地完成学业获得学位，另一方面他开始通过各种途径自学。最终也取得了很好的效果。以下是他的经验分享。</p><h3 id="一-Develop-skills"><a href="#一-Develop-skills" class="headerlink" title="一. Develop skills"></a>一. Develop skills</h3><p>学习实际技能，这听起来像是废话，但是反省下自己，在大学中，我们所学习的东西有多少是直接就拿来应用到实际生活中以及我们的工作？学习实际技能的好处在于，我们可以直接把它应用起来，这样看到效果之后，会感觉内心受鼓舞，会更有动力。</p><p>学会理论知识相对容易，因为除了考试，好像没有更好的一种方式来检查我们的学习成果，好像自己都懂，又好像不懂。但是实际技能就不同，给你一个任务，你最终是否能把效果实现出来？</p><p><strong>以结果输出为导向来学习是否效率更高</strong></p><p>比如看一本书，我们也许很快就看完了，那下一步就逼着自己把这本书的内容写下来，写分析，还可以讲给别人听。这种实际的操作远远比“纸上”的学习更有效率。</p><blockquote><p>总之，学习实际技能的关键就在于，是否能把学的东西通过某种方式应用出来，输出一个结果，而不是只记在心里。</p></blockquote><h3 id="二-Learn-from-the-best"><a href="#二-Learn-from-the-best" class="headerlink" title="二. Learn from the best"></a>二. Learn from the best</h3><p>怎么快速学习？一个好方法就是找到你所在行业里面最优秀的人（起码要比你优秀很多），然后向他们学习，不要自己瞎折腾。让自己处于一个周围有很多比自己厉害的环境中，这样才能更快学习。互联网时代也让一切资源都变得触手可得。Till也分享了自己是如何获取为牛人工作的实习机会：</p><ul><li>把关注点从自己身上移到别人身上。不要老想着自己怎么怎么样，而是多去思考，我能为这个人做什么，我能给他带来什么价值</li></ul><h3 id="三-learning-is-more-important-than-making-money"><a href="#三-learning-is-more-important-than-making-money" class="headerlink" title="三. learning is more important than making money"></a>三. learning is more important than making money</h3><p>学习知识和技能远比赚钱本身更重要。永远都不应该目光短浅地只盯着眼前的工资看。</p><h3 id="四-Keep-going-and-have-guts-to-accept-“no”"><a href="#四-Keep-going-and-have-guts-to-accept-“no”" class="headerlink" title="四. Keep going and have guts to accept “no”"></a>四. Keep going and have guts to accept “no”</h3><p>这句话听起来很鸡汤，但是还是要这样去鼓励自己。把别人的拒绝当作是一种反馈，而不是对自己价值的一种否定。别人拒绝肯定是有原因的，我们要做的是从这个反馈中最大化获取信息，思考如何进一步优化，而不是自我抱怨和否定。</p><hr><p>坚持每天输出英语，提高听说读写能力，加油。</p><p>4 steps to desgin your own education.</p><p>1, develop skills</p><ul><li>reading enough and summarize and wirte a blog about it.</li></ul><p>2, learn from the best</p><ul><li>surround yourself in the environment where your peers are much better than you.</li></ul><p>3, learning is more important than making money.</p><ul><li>willing to work for free in order to learn skills.</li></ul><p>4, keep going and have courage to accept “no”.</p>]]></content>
      
      
      <categories>
          
          <category> TED </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TED </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP入门笔记整理(二)语句</title>
      <link href="/function.html"/>
      <url>/function.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-if条件"><a href="#1-if条件" class="headerlink" title="1. if条件"></a>1. if条件</h3><p>这个很简单，很js语法很像。就是添加一个判断。这里省略了$day这个变量和&lt;?php ?&gt;这些</p><a id="more"></a><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> $date = date(<span class="string">'l'</span>);</span><br><span class="line"> <span class="keyword">if</span>($date == <span class="string">"Saturday"</span> || $date == <span class="string">"Sunday"</span>)&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">"&lt;p&lt;have a nice day!&lt;/p&lt;"</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-switch-case"><a href="#2-switch-case" class="headerlink" title="2. switch case"></a>2. switch case</h3><p>switch就是取代if来进行多重条件判断的，比如：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  $day = <span class="string">"Monday"</span>;</span><br><span class="line">  <span class="keyword">switch</span>($day)&#123;</span><br><span class="line">     <span class="keyword">case</span> <span class="string">"Monday"</span>:</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">"oh dear!Monday"</span>;</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"Saturday"</span>:</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"Saturday"</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"Tuesday"</span>:</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"Tuesday"</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"Thurdays"</span>;<span class="keyword">case</span> <span class="string">"Sunday"</span>:</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"Great"</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>也可以把两个条件判断放到一起，比如case “Thurdays”;case “Sunday”: 最后分好隔开就可以。</p><h3 id="3-for循环"><a href="#3-for循环" class="headerlink" title="3. for循环"></a>3. for循环</h3><p>和js一样，php也是有循环的，这里主要介绍for以及while循环，十分简单，敲个代码作为笔记。以下两种情况都会输出1到10；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">      $count = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">while</span>($count&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">         <span class="keyword">echo</span> $count . <span class="string">"&lt;br&lt;"</span>;</span><br><span class="line">         $count++;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span>($count=<span class="number">1</span>;$count&lt;=<span class="number">10</span>;$count++)&#123;</span><br><span class="line">        <span class="keyword">echo</span> $count . <span class="string">"&lt;br&lt;"</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-include用法"><a href="#4-include用法" class="headerlink" title="4. include用法"></a>4. include用法</h3><p>有时候我们会把不同代码放在不同文件，那么就需要引入进来，可以通过include和require命令来实现：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">       <span class="comment">//如何避免多次使用includes;利用include_once来代替</span></span><br><span class="line">       <span class="comment">//include如果没找到文件会warning , require没找到会stop running;</span></span><br><span class="line">      <span class="keyword">require_once</span> <span class="string">"includes/file1.php"</span>;</span><br><span class="line">      <span class="keyword">require_once</span> <span class="string">"includes/file2.php"</span>;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"my favorite food are $fruit1, $fruit2"</span>;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"my favorite foods are"</span>.$fruit1.<span class="string">", "</span>.$fruit2;</span><br><span class="line">    ?&lt;</span><br></pre></td></tr></table></figure></p><p>这里就获取到了来自file1 file2里面的变量$fruit1 $fruit2;这里用了两种方法，一个是字符串拼接，当然也可以直接放在echo双引号里面。</p><h3 id="5-函数function"><a href="#5-函数function" class="headerlink" title="5. 函数function"></a>5. 函数function</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">        $fruit2 = <span class="string">"peaches"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">showFruit</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">GLOBAL</span> $fruit2;</span><br><span class="line">            <span class="comment">//通过Global就可以调用函数外部定义的变量了；</span></span><br><span class="line">            $fruit1 = <span class="string">"apples"</span>;</span><br><span class="line">            <span class="keyword">echo</span> $fruit1;</span><br><span class="line">            <span class="keyword">echo</span> $fruit2;</span><br><span class="line">        &#125;</span><br><span class="line">        showFruit();<span class="comment">//调用函数</span></span><br><span class="line">    ?&lt;</span><br></pre></td></tr></table></figure><p>函数也可以传递参数；<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">area</span><span class="params">($x, $y)</span></span>&#123;</span><br><span class="line">        $area = $x * $y;</span><br><span class="line">        <span class="keyword">return</span> $area;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"hi"</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//return就是函数返回最终的数据，return后面的echo "hi"始终都不会被执行；</span></span><br><span class="line">    <span class="keyword">echo</span> area(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">area1</span><span class="params">($x, $y,$format)</span></span>&#123;</span><br><span class="line">        $area1 = $x * $y;</span><br><span class="line">        $output = <span class="string">"&lt;format&lt;$area1&lt;/format&lt;"</span>;</span><br><span class="line">        <span class="keyword">return</span> ($output);</span><br><span class="line">    &#125;</span><br><span class="line">    $area1 = area1(<span class="number">3</span>,<span class="number">3</span>,<span class="string">'h1'</span>);</span><br><span class="line">    <span class="keyword">echo</span> $area1;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>area1中传递的第三个参数用来放标签，并且把area1()这个调用的函数放在$area1变量中，最终打印出来；</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP入门笔记整理(一)</title>
      <link href="/php-e5-85-a5-e9-97-a8-e7-ac-94-e8-ae-b0-e6-95-b4-e7-90-86-e4-b8-80.html"/>
      <url>/php-e5-85-a5-e9-97-a8-e7-ac-94-e8-ae-b0-e6-95-b4-e7-90-86-e4-b8-80.html</url>
      
        <content type="html"><![CDATA[<p>近期看了一个The Ultimate Web Development Course的教程，有关于php入门的一些知识，老师讲的也非常好，近期决定把笔记整理以下。</p><a id="more"></a><h3 id="1-关于XAMPP"><a href="#1-关于XAMPP" class="headerlink" title="1. 关于XAMPP"></a>1. 关于XAMPP</h3><p>x,表示x-cross-platform，跨平台，a, apache, 是一个webserver, m-mysql数据库，p, php, 后面一个p，指的是perl 安装很简单直接去官网下载按照提示一步步来就可以</p><p>运行：找到安装目录下的xammp的文件夹，运行里面的xampp-control控制面板，点开apache, mysql对应的start，到浏览器里面输入localhost，如果出来php的页面，webserver应该就是搭建成功了;</p><p>如果不行，很可能是端口被占用了，这种情况要么就去给占用端口的软件给一个端口，要么就到config文件夹里面改一下端口号的设置；</p><h3 id="2-PHP"><a href="#2-PHP" class="headerlink" title="2. PHP"></a>2. PHP</h3><p>通常见到的php都是和html混合在一起用的，html用来展示网页静态内容，php则是负责更新动态内容。注意创建php文件的路径必须是在\xampp\htdocs里面，以.php作为后缀。</p><h3 id="3-echo"><a href="#3-echo" class="headerlink" title="3. echo"></a>3. echo</h3><p>echo就相当于使用print的感觉，在浏览器中展示对应内容。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">echo</span> date(<span class="string">'l'</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">  <span class="keyword">echo</span> date(<span class="string">'H:i:s'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>data(‘l’)会打印出对象星期日，date(‘H:i:s’)则是Hour, minute, seconds</p><h3 id="4-变量"><a href="#4-变量" class="headerlink" title="4. 变量"></a>4. 变量</h3><p>我们可能需要对这些数据进行进一步操作，那么就需要用到变量才存储，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  $date = date(<span class="string">'d'</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Today is $date&lt;/p&gt;"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Today is "</span> . $date . <span class="string">"&lt;/p&gt;"</span>;</span><br><span class="line">  <span class="comment">//这里是双引号</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"> &lt;p&gt;Today is <span class="meta">&lt;?php</span> <span class="keyword">echo</span> $date;<span class="meta">?&gt;</span>&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>这里存在变量$date中。注意如果要同时使用字符串和变量，必须使用双引号才行，如果是单引号，最后浏览器会之直接显示$date，而不是展示对应变量内容。</p><blockquote><p>上面谢了三种不同的方法来，可以直接echo放在双引号里面，也可以使用.来做字符串拼接，还可以直接放在p标签里面。但是注意如果是涉及到运算法则相加减等，则必须使用字符串拼接的方法，如下：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   $x = <span class="number">5</span>;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">"5 + 1 is "</span> . ($x +<span class="number">1</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-字符串"><a href="#5-字符串" class="headerlink" title="5. 字符串"></a>5. 字符串</h3><pre><code>如果在字符串里面又有引号，该怎么写呢？</code></pre><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"&lt;p&gt;'step outside', he said.&lt;/p&gt;"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'"that\'s interesting", he said'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'"The time now is 9:00pm. In 2 hours\' time, it would be 10:00pm", said him'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>原生JS通过数组实现slider</title>
      <link href="/array-slider.html"/>
      <url>/array-slider.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一个很简单的轮播图案例，原理是把图片路径放在数组里，然后设置定时器，每隔一段时间就改变图片路径，这样就可以显示不同图片， 另外，如何实现图片到了第四张自动切换第一张，通过对index进行判断，如果不是最后一张，则index++,否则index=0,回到第一张；</p></blockquote><p><img src="http://www.webfront.online/wp-content/uploads/2017/02/slider-1.gif" alt=""></p><p><strong>这里通过setTimeout来模拟setInterval</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> index = <span class="number">0</span>,</span><br><span class="line">  timer = <span class="number">2000</span>,</span><br><span class="line">  img = [<span class="string">'img/banner1.jpg'</span>, <span class="string">'img/banner2.jpg'</span>, <span class="string">'img/banner3.jpg'</span>];</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">changeImg</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pic = $(<span class="string">'slider'</span>);</span><br><span class="line">    pic.src = img[index];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index &amp;lt; img.length - <span class="number">1</span>) &#123;</span><br><span class="line">      index++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      index = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     setTimeout(changeImg,timer);</span><br><span class="line">   &#125;</span><br><span class="line">changeImg();</span><br><span class="line">&#125;</span><br><span class="line">init();</span><br></pre></td></tr></table></figure><ul><li>首先定义一个init函数，最终通过调用它来实现轮播图效果</li><li>初始化index为0，并且把图片的路径都存放在img数组中;</li><li>timer = 2000,为每隔2秒就调用setTimeout函数;</li><li>定义changeImg函数并调用，该函数首先获取存放轮播图的标签，并且根据img[index]来设置路径，每隔2秒调用，实现了轮播效果</li></ul>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端与SEO优化</title>
      <link href="/e5-89-8d-e7-ab-af-e4-b8-8eseo-e4-bc-98-e5-8c-96.html"/>
      <url>/e5-89-8d-e7-ab-af-e4-b8-8eseo-e4-bc-98-e5-8c-96.html</url>
      
        <content type="html"><![CDATA[<p>这几天看了些SEO优化的文章，顺便总结一下。</p><a id="more"></a><h3 id="1-SEO优化之网站结构"><a href="#1-SEO优化之网站结构" class="headerlink" title="1. SEO优化之网站结构"></a>1. SEO优化之网站结构</h3><p><strong>1.1 首页</strong></p><p>网站首页权重最高，但首页链接也不能太多，会降低网站首页的权重，也会影响到用户体验。</p><p>　　因此对于中小型企业网站，建议首页链接在100个以内，链接的性质可以包含页面导航、底部导航、锚文字链接等等，注意链接要建立在用户的良好体验和引导用户获取信息的基础之上。</p><p><strong>1.2 扁平化目录与面包屑导航</strong></p><p>之前看到有人分享说，如果用户点了三次还没找到自己想要的信息，就说明网站的层次等没有弄好。所以应该采用扁平化目录，避免嵌套太深。</p><p>同时，也应该在网页头部增加面包屑导航，可以让用户清楚自己当前所处的位置，同时提供了返回各个页面的接口，方便操作。面包屑导航也方便搜索引擎蜘蛛抓取数据。</p><p>做好404页面</p><h3 id="2-SEO优化之页面代码"><a href="#2-SEO优化之页面代码" class="headerlink" title="2. SEO优化之页面代码"></a>2. SEO优化之页面代码</h3><ul><li>注重语义化标签，比如用ul li表示分点, nav导航，header头部信息等;</li><li>避免使用&amp;nbsp，文本缩进通过css来控制；</li><li>a 标签加 “title” 属性, 外部链接，加上 el=”nofollow” 属性</li><li>img 标签添加alt 属性</li><li><code>&lt;b&gt;&lt;i&gt;</code>标签: 只是用于显示效果时，没有SEO效果，和<code>&lt;strong&gt;&lt;em&gt;</code>不同，后者权重高一点。</li><li>如果是不让用户看到，但还是需要搜索引擎蜘蛛抓取的， 不用display: none ， 而是使用z-index等控制显示</li><li>每个页面不要出现超过一次h1, h1标签权重很高。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Website Performance </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SEO </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jq获取dom对象bug report</title>
      <link href="/dom-object.html"/>
      <url>/dom-object.html</url>
      
        <content type="html"><![CDATA[<p>今天在做一个注册表格的时候，要获取对应input，获取username, email等；最开始是用这种方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $input = $(<span class="string">'form :input'</span>)</span><br><span class="line">        ,$username = $input[<span class="number">0</span>]</span><br><span class="line">        ,$email = $input[<span class="number">1</span>]</span><br><span class="line">        ,$password = $input[<span class="number">2</span>];</span><br></pre></td></tr></table></figure></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">打印出来的结果是`&lt;input type=&quot;text&quot; placeholder=&quot;用户名&quot; name=&quot;name&quot; required lay-verify=&quot;required&quot; class=&quot;required&quot;&gt;` 发现不能绑定事件；</span><br><span class="line"></span><br><span class="line">后来直接获取input, 给对应input添加class类再获取，就可以绑定事件； var username = $(&apos;.username&apos;);</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">username.click(function()&#123;</span><br><span class="line">       console.log(username);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>当自己alert $username和username,前者就是Html element,后者则是object；</p>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nodejs系列从入门到制作APP(十九)Express,socket.io多人聊天室</title>
      <link href="/chatroom.html"/>
      <url>/chatroom.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>利用node.js, socket.io, express, bootstrap搭建的一个简单的多人聊天室</p></blockquote><h3 id="1-关于websocket-socket-io"><a href="#1-关于websocket-socket-io" class="headerlink" title="1. 关于websocket, socket.io"></a>1. 关于websocket, socket.io</h3><p>websocket可以说是html5中新的通信API。在此之前，浏览器和服务器的通信都是通过http，但是这种http通信是单向的，所以要实现那种即时双向的通信就比较麻烦。 websocket的出现解决了这一个问题</p><p>Web Socket的就是在一个单独的持久连接上提供全双向通信。但websocket也存在兼容的问题，这是出现了socket.io</p><a id="more"></a><p>socket.io 是基于node.js的，相当于说封装了websocket所有API，同时又有良好的兼容性。</p><h3 id="2-搭建服务器"><a href="#2-搭建服务器" class="headerlink" title="2. 搭建服务器"></a>2. 搭建服务器</h3><p><strong>2.1 创建package.json， 安装依赖包</strong></p><p><code>npm install</code></p><p><code>npm install --save express</code></p><p><code>npm install --save socket.io</code></p><p><strong>2.2 创建一个index.js文件，作为服务端文件</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">'http'</span>).createServer(app);</span><br><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>).listen(server);</span><br><span class="line">server.listen(process.env.PORT || <span class="number">3000</span>);</span><br><span class="line">users = [];</span><br><span class="line">connections = [];</span><br><span class="line"><span class="comment">//console.log('server is running');</span></span><br></pre></td></tr></table></figure></p><ul><li>首先require了express, 然后相当于创建了一个express实例app，app享有express的所有属性方法；</li><li>接下来让app充当一个HTTP服务器（语言粗糙。。。）</li><li><code>var io = require(&#39;socket.io&#39;).listen(server);</code>）新建了一个socket.io实例，传递了http对象（HTTP服务器)</li><li><code>server.listen</code> 开一个端口，进行监听；</li><li>users和connections数组分别用来存储不同的用户和链接</li></ul><p><strong>2.2 设置路由</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    res.sendFile(__dirname + <span class="string">'/index.html'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当用户访问的时候，输出index.html页面;</p><h3 id="3-socket-io-设置"><a href="#3-socket-io-设置" class="headerlink" title="3. socket.io 设置"></a>3. socket.io 设置</h3><p>express服务端搭建好之后，接着是服务器的事件监听等。后台的所有事件都写在io对象的connection事件上。总之浏览器那边也要先开启，然后向服务器连接的基础上进行事件监听等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">io.sockets.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</span><br><span class="line">connections.push(socket);</span><br><span class="line"><span class="comment">//把新增的链接push到connections数组里面去</span></span><br><span class="line">socket.on(<span class="string">'disconnect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    users.splice(users.indexOf(socket.username), <span class="number">1</span>);</span><br><span class="line">    connections.splice(connections.indexOf(socket), <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//一旦socket链接断掉，删除并更新username，html重新渲染</span></span><br><span class="line">    updateUsernames();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">socket.on(<span class="string">'send message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//当客户端，当表格提交就会执行send message,然后再服务端执行这个功能</span></span><br><span class="line">    io.sockets.emit(<span class="string">'new message'</span>, &#123;<span class="attr">msg</span>: data, <span class="attr">user</span>: socket.username&#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">socket.on(<span class="string">'new user'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data,callback</span>)</span>&#123;</span><br><span class="line">    callback(<span class="literal">true</span>);</span><br><span class="line">    socket.username = data;</span><br><span class="line">    users.push(socket.username);</span><br><span class="line">    updateUsernames();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateUsernames</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    io.sockets.emit(<span class="string">'get users'</span>, users);</span><br><span class="line">&#125;  &#125;);</span><br></pre></td></tr></table></figure><ul><li><code>socket.on(&#39;connection&#39;,function(socket){})</code>;//建立连接</li><li><code>socket.on(&#39;disconnect&#39;,callback)</code>; //用户断开连接触发事件</li></ul><h3 id="4-客户端"><a href="#4-客户端" class="headerlink" title="4. 客户端"></a>4. 客户端</h3><p><img src="http://www.webfront.online/wp-content/uploads/2017/03/bootstrap-1024x696.png" alt=""></p><p><strong>4.1 JS</strong> - 首先要引入socket.io文件： <code>&lt;script src=&quot;http://cdn.bootcss.com/socket.io/1.7.3/socket.io.js&quot;&gt;&lt;/script&gt;</code></p><blockquote><p>socket.io通信事件是可以自定义，所以要服务端客户端要对应好。这个小案例的逻辑就是：当用户点击提交信息按钮，客户端调用socket.emit(‘send message’)法向服务器发送。服务器监听了socket.on(‘send message’)就执行io.socket.emit(‘new message’); 客户端通过这个new message方法来把接收到的信息渲染到页面上</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> socket = io.connect();</span><br><span class="line">        <span class="comment">//网页加载socket.io.js，产生一个io全局对象，并连接socket;</span></span><br><span class="line">        <span class="comment">//调用io()时，没有声明任何url，默认连接这个页面的host服务器</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> $messageForm = $(<span class="string">'#messageForm'</span>);</span><br><span class="line">        <span class="keyword">var</span> $message = $(<span class="string">'#message'</span>);</span><br><span class="line">        <span class="keyword">var</span> $chat = $(<span class="string">'#chat'</span>);</span><br><span class="line">        <span class="keyword">var</span> $userForm = $(<span class="string">'#userForm'</span>);</span><br><span class="line">        <span class="keyword">var</span> $username = $(<span class="string">'#username'</span>);</span><br><span class="line">        <span class="keyword">var</span> $userFormArea = $(<span class="string">'#userFormArea'</span>);</span><br><span class="line">        <span class="keyword">var</span> $messageArea = $(<span class="string">'#messageArea'</span>);</span><br><span class="line">        <span class="keyword">var</span> $users = $(<span class="string">'#users'</span>);</span><br><span class="line"></span><br><span class="line">        $messageForm.submit(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            e.preventDefault();</span><br><span class="line">            socket.emit(<span class="string">'send message'</span>, $message.val());</span><br><span class="line">            $message.val(<span class="string">''</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把接收到的来自服务端的数据通过这个函数渲染到html</span></span><br><span class="line">        socket.on(<span class="string">'new message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;  </span><br><span class="line">            $chat.append(<span class="string">'&lt;div class="list"&gt;&lt;span class="name"&gt;'</span>+data.user+<span class="string">': &lt;/span&gt;&lt;span class="well"&gt;'</span>+data.msg+<span class="string">'&lt;/span&gt;&lt;/div&gt;'</span>)</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//默认增加一个判断，第一次打开默认聊天框不显示，只有在用户提交了姓名后才显示</span></span><br><span class="line">        $userForm.submit(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            e.preventDefault();</span><br><span class="line">            socket.emit(<span class="string">'new user'</span>, $username.val(), <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(data)&#123;</span><br><span class="line">                    $userFormArea.hide();</span><br><span class="line">                    $messageArea.show();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">            $username.val(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        socket.on(<span class="string">'get users'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> html = <span class="string">''</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.length;i++)&#123;</span><br><span class="line">                html+= <span class="string">'&lt;li class="list-group-item"&gt;'</span>+data[i]+<span class="string">'&lt;/li&gt;'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            $users.html(html);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p><strong>4.2 HTML代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span> <span class="attr">id</span>=<span class="string">"userFormArea"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-12"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"userForm"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>输入群聊用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">value</span>=<span class="string">"登陆"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span> <span class="attr">id</span>=<span class="string">"messageArea"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-2"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>参与人员<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-group"</span> <span class="attr">id</span>=<span class="string">"users"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"chat"</span> <span class="attr">id</span>=<span class="string">"chat"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"messageForm"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>发送消息<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"message"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">value</span>=<span class="string">"点击发送"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>4.3 CSS代码</strong> 这里css引用了bootstrap，这里代码仅仅是在原来基础上做了简单的修改：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#messageArea</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.chat</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">3%</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.well</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">10px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.name</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">2%</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.list</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">46px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nodejs系列从入门到制作APP(十八)处理POST请求</title>
      <link href="/post.html"/>
      <url>/post.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-关于post请求"><a href="#1-关于post请求" class="headerlink" title="1. 关于post请求"></a>1. 关于post请求</h3><p>请求方法一般是post，或者get，post请求通常主要是用于表单提交数据，比如用户注册等等。</p><a id="more"></a><h3 id="2-post请求实现一个小案例"><a href="#2-post请求实现一个小案例" class="headerlink" title="2. post请求实现一个小案例"></a>2. post请求实现一个小案例</h3><p>功能：用户在表单页面提交了一些用户信息，接下来我们获取这些信息，然后跳转到另外一个页面去确认用户提交的信息。</p><ul><li>安装body-parser;</li></ul><p>之前处理get请求，可以直接使用express的app.get方法，处理post请求，可以安装body-parser <a href="https://www.npmjs.com/package/body-parser" target="_blank" rel="noopener">https://www.npmjs.com/package/body-parser</a></p><ul><li>使用body-parser;<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> urlencodedParser = bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">app.post(<span class="string">'/login'</span>, urlencodedParser, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">'info'</span>, &#123;<span class="attr">data</span>: req.body&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p>当我们在login这个页面点击submit按钮，发送post请求，urlencodedParser是一个中间件，它就会去解析用户输入的数据，而我们通过req.body可以获取到用户输入的内容，</p><p>res.send(‘info’, {data: req.body}) 表示会转到info页面，而info.ejs会使用req.body来进行页面渲染，把用户输入的数据呈现出来（类似下面这种）<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你的姓名是： <span class="tag">&lt;<span class="name">%=</span> <span class="attr">data.who</span> %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>你的地址是： <span class="tag">&lt;<span class="name">%=</span> <span class="attr">data.address</span> %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nodejs系列从入门到制作APP(十七)模板引擎Ejs</title>
      <link href="/nodejs-app-16.html"/>
      <url>/nodejs-app-16.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-为什么要用模板引擎？"><a href="#1-为什么要用模板引擎？" class="headerlink" title="1. 为什么要用模板引擎？"></a>1. 为什么要用模板引擎？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'js'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    res.sendFile(__dirname + <span class="string">'/index.html'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">'/contact'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    res.sendFile(__dirname + <span class="string">'/contact.html'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><a id="more"></a><p>以上代码相当于是一个静态请求，当我们要点击contact页面，就获取一个该页面，但是如果我们想根据用户输入的内容，在页面中动态插入一些内容，比如来自数据库的一些信息等。这个时候就要用到模板引擎。模板引擎，个人理解，基本上就是在html页面插入一些javascript代码（通常以变量的形式）来储存数据。</p><h3 id="2-Ejs模板引擎"><a href="#2-Ejs模板引擎" class="headerlink" title="2. Ejs模板引擎"></a>2. Ejs模板引擎</h3><p>模板引擎有很多，比如jade, handlebars。今天要使用的是十分轻量级的ejs，<a href="http://www.embeddedjs.com/" target="_blank" rel="noopener">http://www.embeddedjs.com/</a></p><p><strong>1. 安装ejs</strong></p><p><code>npm install -g ejs</code></p><p><strong>2. ejs设置</strong></p><p>在使用ejs之前，要告诉express,我们将会使用ejs作为view engine，这样才能正确解析。</p><p><code>app.set(&#39;view engine&#39;, &#39;ejs&#39;)</code></p><p>接下来创建一个views文件夹，所有的ejs模板等都放在这个文件夹里。创建一个profile.ejs文件。ejs语法和html基本一样，不过可以在里面嵌入js代码。</p><p>之前没用ejs之前都是res.send或者res.sendFile，但是使用ejs模板，就改成了res.render(‘profile’);render里面的路径不用写成绝对路径，因为默认会自动先查看views，这相当于是默认设置，也解释了为什么之前要设置views文件夹，并且把ejs文件放在里面。</p><p>res.render();括号里面可以直接写views文件夹里面的index,contact页面，因为会直接查看views文件里，所以后面的.ejs后缀可以不写；</p><p><strong>3. ejs文件怎么写？</strong></p><p>ejs语法非常简单，可以直接写数据（变量）</p><p><code>&lt;h1&gt; &lt;%= title %&gt; &lt;/h1&gt;</code></p><p>也可以写js for循环这种代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">   &lt;% <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;supplies.length; i++) &#123;%&gt;</span><br><span class="line">       &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">supplies</span>[<span class="attr">i</span>] %&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">   &lt;% &#125; %&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br></pre></td></tr></table></figure><p><strong>4. 简单案例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'profile'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = &#123;</span><br><span class="line">        name: <span class="string">'jane'</span>,</span><br><span class="line">        job: <span class="string">'teacher'</span></span><br><span class="line">        age: <span class="number">18</span></span><br><span class="line">    &#125;;</span><br><span class="line">    res.render(<span class="string">'profile'</span>, &#123;<span class="attr">data</span>: data&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>ejs文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Her name is: <span class="tag">&lt;<span class="name">%=</span> <span class="attr">data.name</span> %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Her job is: <span class="tag">&lt;<span class="name">%=</span> <span class="attr">data.job</span> %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时页面会输出对应的内容，但是在实际情况中，肯定不会直接把数据放在app.js文件夹里</p><p><strong>5. ejs加入js代码</strong></p><p>之前都是直接在ejs页面添加简单的数据，是十分简单的操作。但实际上ejs还是可以循环，比如如果上例中的data变量里面还有一个数组，最终希望把数组循环显示到页面，该怎么操作呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'profile'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> data = &#123;</span><br><span class="line">            name: <span class="string">'jane'</span>,</span><br><span class="line">            job: <span class="string">'teacher'</span></span><br><span class="line">            age: <span class="number">18</span>,</span><br><span class="line">            friends: [<span class="string">'Tony'</span>, <span class="string">'Steve'</span>, <span class="string">'Peter'</span>]</span><br><span class="line">        &#125;;</span><br><span class="line">        res.render(<span class="string">'profile'</span>, &#123;<span class="attr">data</span>: data&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>ejs文件：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Her name is: <span class="tag">&lt;<span class="name">%=</span> <span class="attr">data.name</span> %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Her job is: <span class="tag">&lt;<span class="name">%=</span> <span class="attr">data.job</span> %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Her friends: <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">%</span> <span class="attr">data.friends.forEach</span>(<span class="attr">function</span>(<span class="attr">item</span>)&#123; %&gt;</span></span><br><span class="line">           //循环data.frineds里面的每一项，即item，然后渲染到每个li上面</span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">item</span> %&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">%</span> &#125;); %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="3-模板公用"><a href="#3-模板公用" class="headerlink" title="3. 模板公用"></a>3. 模板公用</h3><p>这个在英语里面叫partial template,不确定中文如何翻译。总之意思就是，比如首页和其他子页面都有一些公用的代码，比如底部，顶部等等。我们不需要在每一个页面都写上重复的代码，可以直接创建一个partials文件夹，然后在里面写上公用的部分，然后在首页等其他页面，在正确的位置直接引入就是了。</p><p>这样的好处在于： 1- 避免了写大量重复的代码； 2- 如果公共部分发生变化，只需要修改一个地方即可；</p><p>比如footer这个部分样式一致，可以在有footer公用样式的页面添加：</p><p><code>&lt;% include partials/footer %&gt;</code></p>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nodejs系列从入门到制作APP(十六)Express</title>
      <link href="/nodejs-app-16-2.html"/>
      <url>/nodejs-app-16-2.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-express是什么？"><a href="#1-express是什么？" class="headerlink" title="1. express是什么？"></a>1. express是什么？</h3><p>Express 是一个简洁的 node.js 应用框架, 提供了丰富的 HTTP 工具。 Express 核心： - 可以设置中间件来响应 HTTP 请求。 - 定义路由用于执行不同的 HTTP 请求动作。 - 可以通过向模板传递参数来动态渲染 HTML 页面。</p><a id="more"></a><h3 id="2-开始使用express"><a href="#2-开始使用express" class="headerlink" title="2. 开始使用express"></a>2. 开始使用express</h3><p>直接npm install -g express;并且require，app这个变量就集成了express的方法和属性；</p><p><code>var express = require(&#39;express&#39;);</code></p><p><code>var app = express();</code></p><h3 id="4-用express创建server"><a href="#4-用express创建server" class="headerlink" title="4. 用express创建server"></a>4. 用express创建server</h3><p><code>app.listen(3000);</code></p><p>这样就相当于在<a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000/</a> 设置了server,比起之前http.createServer要简单得多；</p><h3 id="5-express处理http请求"><a href="#5-express处理http请求" class="headerlink" title="5. express处理http请求"></a>5. express处理http请求</h3><ul><li>get 一般是反映在url里面, 用户获取信息</li><li>post</li><li>delete*   put</li></ul><p>简单案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.get(<span class="string">'/contact'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">'hi'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">'/contact'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">'this is contact'</span>);</span><br><span class="line">&#125;); </span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>以上得代码就是先获取express模块，然后app这个变量享有express得内部方法和属性，app.get(‘/‘,function())就相当于是当用户点击点击首页，req表示请求，res返回数据。在这里res.send就表示把hi这个字符串显示在首页上；而后面一个则是访问contact页面时候；</p><h3 id="6-动态url以及req-params的用法"><a href="#6-动态url以及req-params的用法" class="headerlink" title="6. 动态url以及req.params的用法"></a>6. 动态url以及req.params的用法</h3><p>之前的都是静态确定的具体请求，比如请求contact页面，然后返回一个确定的页面等。但是，我们如何根据用户的请求，来动态输入不同的内容呢？这里可以使用req.params，是用来获取用户请求的具体数据；比如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.get(<span class="string">'/profile:name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">   res.send(<span class="string">'你要获取的信息是 '</span> + req.params.name);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这里根据用户要获取的profile后面的name值，来把它返回到页面中；</p>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nodejs系列从入门到制作APP(十五)NPM/package.json</title>
      <link href="/nodejs-app-15-2.html"/>
      <url>/nodejs-app-15-2.html</url>
      
        <content type="html"><![CDATA[<h3 id="NPM是什么？"><a href="#NPM是什么？" class="headerlink" title="NPM是什么？"></a>NPM是什么？</h3><p>当安装node.js的时候，就自动安装了npm包管理工具，可以在命令行工具中输入npm -v来确认。NPM 就是node package manager,中文包管理工具，主要是用来帮助我们安装第三方包或者模块，十分方便。比如后续用的express 就是其中的package之一。如果要安装package，可以去<a href="http://www.npmjs.com搜索名字，对应会出来安装方法，package的使用详情等。" target="_blank" rel="noopener">www.npmjs.com搜索名字，对应会出来安装方法，package的使用详情等。</a></p><a id="more"></a><h3 id="如何安装以及卸载package"><a href="#如何安装以及卸载package" class="headerlink" title="如何安装以及卸载package"></a>如何安装以及卸载package</h3><p>一般都是npm install name -g 这里name就是包的名字，-g 表示 global，全局安装，以后可以在随意调用。 npm install name –save-dev 就是把包安装到当前的项目中。 npm uninstall name 就可以</p><blockquote><p>推荐nodemon 安装这个包，就相当于有了个监听器，只要在终端输入nodemon app.js，一旦文档内容变化，就会自动更新页面，不需要每次有改动就手动ctrl + c, node app这样操作</p></blockquote><h3 id="package-json文件是什么"><a href="#package-json文件是什么" class="headerlink" title="package.json文件是什么"></a>package.json文件是什么</h3><p>如果项目很大，会需要很多安装很多模块和包，并且如果在别人电脑上运行我们的项目，别人电脑没有依赖的包，就无法正常显示。这个时候，package.json文件就排上用场了。它的作用，个人感觉主要是两个方面，一是跟踪我们安装的所有包，只要我们通过终端安装了包，都会被自动记录到package.json文件里面，便于管理。另外，如果别人电脑上查看我们的项目，只要有package.json文件，直接npm install就可以一次性安装所有项目依赖的包。</p><blockquote><p>创建package.json文件很简单，直接npm init, 然后在安装包的时候，package.json文件会自动更新，显示依赖的包</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nodejs系列从入门到制作APP(十四)路由</title>
      <link href="/nodejs-app.html"/>
      <url>/nodejs-app.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-路由与Nodejs的联系"><a href="#1-路由与Nodejs的联系" class="headerlink" title="1. 路由与Nodejs的联系"></a>1. 路由与Nodejs的联系</h3><p>router(路由)，个人浅显地理解为，根据url来判断页面返回内容，比如从首页切换到联系页面，关于页面等等； 之前的案例都只写了一个页面，就是首页，url：127.0.0.1：3000，不管这个url变成 127.0.0.1：3000/contact 还是 127.0.0.1：3000/about 页面展示的内容都是一样的。源代码如下：</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">res.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'jane'</span>,</span><br><span class="line">    age: <span class="number">28</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res.send(<span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">3000</span>,<span class="string">'127.0.0.1'</span>);</span><br></pre></td></tr></table></figure><h3 id="2-第一个简单案例"><a href="#2-第一个简单案例" class="headerlink" title="2. 第一个简单案例"></a>2. 第一个简单案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(req.url === <span class="string">'/home'</span> || req.url === <span class="string">'/'</span>)&#123;</span><br><span class="line">          res.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/html'</span>&#125;);</span><br><span class="line">          fs.createReadStream(__dirname +<span class="string">'/index.html'</span>).pipe(res);  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(req.url === <span class="string">'/contact'</span>)&#123;</span><br><span class="line">          res.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/html'</span>&#125;);</span><br><span class="line">          fs.createReadStream(__dirname +<span class="string">'/contact.html'</span>).pipe(res);  </span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          res.writeHead(<span class="number">404</span>,&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/html'</span>&#125;);</span><br><span class="line">          fs.createReadStream(__dirname +<span class="string">'/404.html'</span>).pipe(res);  </span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>req.url是req自带的一个属性，可以console.log(req.url)查看每一次请求的相对路径，req.url===/ 表示默认的首页地址， 如果用户请求的url是127.0.0.1：3000/home 那么和127.0.0.1：3000展示同样的内容，就是获取text.html 如果用户请求的url是127.0.0.1：3000/contact 那么则会跳转到contact页面; 如果用户请求的是以上之外的情况，则会看到404 page not found页面；</p><h3 id="3-Express"><a href="#3-Express" class="headerlink" title="3. Express"></a>3. Express</h3><p>以上的代码一看就知道有很多重复的内容，如果网站有很多页面，这样写起来无疑很浪费时间，幸好有express框架，以后写起来会更方便。 后续再更新。</p>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Wordpress网站如何添加favicon图标</title>
      <link href="/favicon.html"/>
      <url>/favicon.html</url>
      
        <content type="html"><![CDATA[<p>之前发现打开一些博客的时候，标签页的地方显示有图标，而自己的网站只有默认样式。后来想着怎么把这个favicon图标传上去。</p><p>以后很复杂，结果方法很简单。选择wordpress导航栏上面一个自定义按钮，然后站点身份下面有个站点图标，直接上传就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> Wordpress </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wordpress </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nodejs系列从入门到制作APP(十三)创建第一个html页面</title>
      <link href="/nodejs-app-13.html"/>
      <url>/nodejs-app-13.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-创建一个本地服务器"><a href="#1-创建一个本地服务器" class="headerlink" title="1. 创建一个本地服务器"></a>1. 创建一个本地服务器</h3><p><code>var http = require(&#39;http&#39;);</code></p><a id="more"></a><h3 id="2-获取fs模块保证对file的操作"><a href="#2-获取fs模块保证对file的操作" class="headerlink" title="2. 获取fs模块保证对file的操作"></a>2. 获取fs模块保证对file的操作</h3><p><code>var fs = require(&#39;fs&#39;);</code></p><h3 id="3-完整代码"><a href="#3-完整代码" class="headerlink" title="3. 完整代码"></a>3. 完整代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123; </span><br><span class="line">    res.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;); </span><br><span class="line">    <span class="keyword">var</span> myReadStream = fs.createReadStream(__dirname + <span class="string">'/index.html'</span>, <span class="string">'utf8'</span>); </span><br><span class="line">    myReadStream.pipe(res); &#125;); </span><br><span class="line">server.listen(<span class="number">3000</span>,<span class="string">'127.0.0.1'</span>);</span><br></pre></td></tr></table></figure><p>这里创建了一个本地server,然后获取了同一个路径下的index.html文件，然后通过pipe方法输入到页面，也就是127.0.0.1:3000</p><h3 id="4-Nodejs与json数据"><a href="#4-Nodejs与json数据" class="headerlink" title="4. Nodejs与json数据"></a>4. Nodejs与json数据</h3><p>我们不仅仅可以返回string，还可以使用json对象。比如下面这个，<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        name: <span class="string">'jane'</span>,</span><br><span class="line">        age: <span class="number">28</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res.send(<span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line"> &#125;);</span><br><span class="line">server.listen(<span class="number">3000</span>,<span class="string">'127.0.0.1'</span>);</span><br></pre></td></tr></table></figure></p><blockquote><p>这里注意，res.send一般是传递一个string,对于json这种对象，要首先使用JSON.stringify这个方法把对象转成string才行。此时页面将会返回字符串</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nodejs系列从入门到制作APP(九)读写文件</title>
      <link href="/nodejs-app-9.html"/>
      <url>/nodejs-app-9.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-require-‘fs’"><a href="#1-require-‘fs’" class="headerlink" title="1. require(‘fs’)"></a>1. require(‘fs’)</h3><p>为了实现读写文件的功能，需要先require获取nodejs的fs这个对象 <code>var fs = require(&#39;fs&#39;)</code>;因为fs是nodejs自带的，所以不需要要直接写名字就可以, fs的功能很丰富，这里主要学习读，写文件</p><a id="more"></a><h3 id="2-readFileSync"><a href="#2-readFileSync" class="headerlink" title="2. readFileSync"></a>2. readFileSync</h3><p><strong>读取文件</strong></p><p>在同文件夹中创建readme.txt文件，随便写一些文字;在app.js中输入：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> readme = fs.readFileSync(<span class="string">'readme.txt'</span>, <span class="string">'utf8'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(readMe);</span><br></pre></td></tr></table></figure></p><p>readFileSync的意思就是同步读取，如果fs.readFileSync这句代码后面还有代码，那么将会等到fs.readFileSync完全执行后，才会读取后面的代码；相当于是阻塞式</p><p>readFileSync传递两个参数，第一个式文件的绝对路径，因为我们放在一个文件夹里，所以直接写文件名，第二个是编码，nodejs处理的是二进制数据，就是只有0,1，编码就能把0,1正确解析；</p><h3 id="3-writeFileSync"><a href="#3-writeFileSync" class="headerlink" title="3. writeFileSync"></a>3. writeFileSync</h3><p><strong>编写文件</strong></p><p>接下来可以把readme获取到的文字，写入到另外一个文件里面；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> readme = fs.readFileSync(<span class="string">'readme.txt'</span>, <span class="string">'utf8'</span>);</span><br><span class="line">fs.writeFileSync(<span class="string">'writeMe.txt'</span>, readme);</span><br></pre></td></tr></table></figure><p>在终端中输入node app， 会注意到自动创建了一个writeMe.txt文件，内容就是readme.txt</p><p>writeFileSync传递第一个参数是创建文件的名称，第二个data, 就是写入什么数据，这里是之前存放readme.txt内容的变量 readme;</p><p><strong>异步读取</strong></p><p>readFile这里是异步的，所以可以在读取之后写入一个回掉函数, 表示在完成读取之后，再执行的下一步代码；<br>此时在终端运行node app， 会先看到后面一个console.log内容，因为是异步的，然后再读取readme.txt的内容；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">fs.readFile(<span class="string">'readme.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">      fs.writeFile(<span class="string">'writeMe.txt'</span>, data);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'我会比readme里面的内容先显示'</span>);</span><br></pre></td></tr></table></figure><h3 id="4-删除文件"><a href="#4-删除文件" class="headerlink" title="4. 删除文件"></a>4. 删除文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line">fs.unlink(&apos;writeMe.txt&apos;);</span><br></pre></td></tr></table></figure><h3 id="5-文件夹创建和删除"><a href="#5-文件夹创建和删除" class="headerlink" title="5. 文件夹创建和删除"></a>5. 文件夹创建和删除</h3><p><strong>创建文件夹</strong></p><p><code>fs.mkdir(&#39;dir&#39;);</code></p><p><strong>删除文件夹</strong></p><p><code>fs.rmdir(&#39;dir&#39;);</code></p><blockquote><p>如果文件夹不为空，不能直接删除；先用unlink删除文件，再用redir删除文件夹</p></blockquote><p><strong>小案例：先创建文件夹，读取文件内容，然后写入到其他文件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fs.mkdir(<span class="string">'dir'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    fs.readFile(<span class="string">'delete.html'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">         fs.writeFile(<span class="string">'./dir/write.txt'</span>,data);</span><br><span class="line">     &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nodejs系列从入门到制作APP(十二) stream/buffer</title>
      <link href="/nodejs-app-12.html"/>
      <url>/nodejs-app-12.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-什么是buffer"><a href="#1-什么是buffer" class="headerlink" title="1. 什么是buffer"></a>1. 什么是buffer</h3><p>下载资源的时候，一般有接触buffering这个单词，表示正在缓冲等。怎么去理解nodejs中的buffer呢？比如说有一个人叫做node,住在深山里，有天去了森林发现了很多已经砍好的柴火，想要自己弄回去用，但是他不可能一次性全部弄完，这个时候buffer就像是他的拖拉机，一次性能装多少就先送货回家，然后下次再来。相当于是把一整批资源分成小的块，一旦获取到了资源就先送过去，而不是一直等到所有的资源都获取玩才行动。</p><a id="more"></a><h3 id="2-什么是stream"><a href="#2-什么是stream" class="headerlink" title="2. 什么是stream"></a>2. 什么是stream</h3><p>stream就相当于是链接服务器和客户端，用来传输数据的一个管道。当服务端返回了一定数据给buffer,buffer相当于把数据传递给客户端（通过stream）。stream的类型分为，可读，可写，以及双向的(读写)</p><h3 id="3-创建可读stream—fs-createReadStream"><a href="#3-创建可读stream—fs-createReadStream" class="headerlink" title="3. 创建可读stream—fs.createReadStream"></a>3. 创建可读stream—fs.createReadStream</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> myReadStream = fs.createReadStream(__dirname + <span class="string">'/package.json'</span>);</span><br><span class="line">myReadStream.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">Console.log(chunk);&#125;);</span><br></pre></td></tr></table></figure><ul><li>createReadStream依赖于fs, file system这个内置模块，所以先获取fs</li><li>__dirname获取的是当前的文件所在路径, 以上代码获取同路径下的package.json里面的数据</li><li><p>把数据存在myReadStream这个变量里面，并且进行监听，一旦获取到了部分数据（data相当于自带的一个对象，表示获取到的数据），就打印出来</p><blockquote><p>createReadStream 和之之前readFile的区别在于，前者是部分获取数据，不用等全部的数据加载完就已经开始传输数据了。后者不这样。</p></blockquote></li></ul><h3 id="4-创建可写stream—fs-createWriteStream"><a href="#4-创建可写stream—fs-createWriteStream" class="headerlink" title="4. 创建可写stream—fs.createWriteStream"></a>4. 创建可写stream—fs.createWriteStream</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> myReadStream = fs.createReadStream(__dirname + <span class="string">'/package.json'</span>);</span><br><span class="line"><span class="keyword">var</span> myWriteStream = fs.createWriteStream(__dirname + <span class="string">'/writeMe.txt'</span>);</span><br><span class="line">myReadStream.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">    myWriteStream.write(chunk);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里变量myWriteStream获取了writeMe.txt这个文件，一旦readStream获取了数据，就分批把它写入到myWriteStream中，也就是writeMe.txt;</p>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nodejs系列从入门到制作APP(十一)创建server</title>
      <link href="/nodejs-app-10.html"/>
      <url>/nodejs-app-10.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-server是什么？"><a href="#1-server是什么？" class="headerlink" title="1. server是什么？"></a>1. server是什么？</h3><a id="more"></a><p>当我们的浏览器中输入网址时，当我们需要获取某个信息的时候，浏览器(client side)发送请求(request)给服务器(server side)，而服务器会响应请求(response)，返回数据给浏览器。但是这两者具体是怎么样沟通的呢？这就设计到protocol(<strong>协议</strong>)。协议总的来说就是一系列的服务端和客户端’沟通’的规则。</p><p>比如，一个葡萄牙人和意大利人想要交流，但是他们语言不一样，用自己的语言，都无法理解对方，于是他们规定都使用英语（他们都知道的语言）作为第三方来沟通。这个和协议类似。</p><h3 id="2-信息如何传输？"><a href="#2-信息如何传输？" class="headerlink" title="2. 信息如何传输？"></a>2. 信息如何传输？</h3><p>每个人的电脑，或者每个服务器都可以以各自的IP地址被识别，比如IP: 76.121.126.74, 如果客户端想从服务端获取数据，那么首先要链接上IP地址，然后打开一个socket（端口），这个端口号就扮演着传输数据的管道。我们的数据可能会以不同的protocol方式而存在，比如http, ftp等，这就类似于葡萄牙人和意大利人说自己的语言，但是最终都协议好以第三方，大家都懂的语言来沟通。FTP就是file transfer protocol,文件上传协议，http, 主要是网站等。</p><h3 id="3-数据传输控制协议-TCP"><a href="#3-数据传输控制协议-TCP" class="headerlink" title="3. 数据传输控制协议 TCP"></a>3. 数据传输控制协议 TCP</h3><p>当确定好了数据到底以什么样的协议去传输，http或者其他的。最终数据会通过socket，以TCP协议来从服务端传输给客户端。</p><h3 id="4-这种nodejs-有什么联系？"><a href="#4-这种nodejs-有什么联系？" class="headerlink" title="4. 这种nodejs 有什么联系？"></a>4. 这种nodejs 有什么联系？</h3><p>nodejs可以帮我们在两台不同电脑，或者在客户端服务端直接建立联系。或者说，根据客户端发送的请求来判断服务端该返回什么数据</p><h3 id="5-port"><a href="#5-port" class="headerlink" title="5. port"></a>5. port</h3><p>另外一个问题是，当我们给服务端发送请求，我们怎么知道那个一定是指向nodejs,而不是其他程序。答案就是服务端上运行的所有程序都有一个特点的端口号（port number），比如3000（所以有时候会出现端口号被占用导致的错误）。</p><p><code>172.54.98.78:3000</code></p><h3 id="6-如何创建server"><a href="#6-如何创建server" class="headerlink" title="6. 如何创建server?"></a>6. 如何创建server?</h3><p><strong>获取http模块</strong></p><p><code>var http = require(&#39;http&#39;);</code></p><p><strong>利用http.createServer方法</strong></p><p>在app.js文件中输入以下代码，然后终端中运行node app，访问<a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000/</a> 页面会渲染出’hey i am here’;createServer function接收两个参数，一个是req,关于发送请求的所有信息，一个是res，是服务端返回的数据。这里的writeHead是响应的头部信息，有点类似于html里面的head,定义了一些meta等，但是实际页面渲染中看不到他们。当服务端的数据返回时，需要告知浏览器如何去解析，content-type，定义了文档类型，这样浏览器就知道了，是html，还是普通文本或者json。这里的status, 200是状态码，表示一切都Ok,400,表示page not found，找不到页面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">res.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/plain'</span>&#125;);</span><br><span class="line">res.end(<span class="string">'hey I am here'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">3000</span>,<span class="string">'127.0.0.1'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'port 3000'</span>);</span><br></pre></td></tr></table></figure><blockquote><p>req自带有一些属性，比如req.url可以查看访问的地址。后期利用express框架，可以更方便地创建server; PS：这里的107.0.0.1就是指的localhost，这里是创建一个本地的服务器。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nodejs系列从入门到制作APP(七)模块的不同写法</title>
      <link href="/nodejs-app-7.html"/>
      <url>/nodejs-app-7.html</url>
      
        <content type="html"><![CDATA[<p>上一次的module.export是只有一个模块叫做number, 但是在实际中，不能只有一个，比如:在 module.js文件里面写入：</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'这个数组一共有 '</span>+ arr.length;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'这两个数量的和等于 '</span>+ (a+b);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> word = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">module</span>.exports.number = number;</span><br><span class="line"><span class="built_in">module</span>.exports.add = add;</span><br><span class="line"><span class="built_in">module</span>.exports.word = word;</span><br></pre></td></tr></table></figure><p>接下来在调用这些模块的文件app.js 中输入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="built_in">require</span>(<span class="string">'./module'</span>);</span><br><span class="line"><span class="comment">//这样就获取了module.js文件中的所有模块，可以通过对象字面量中的点表示法来分别获取单个的</span></span><br><span class="line"><span class="built_in">console</span>.log(result.number([<span class="string">'I'</span>,<span class="string">'you'</span>]));</span><br><span class="line"><span class="built_in">console</span>.log(result.add(<span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line"><span class="built_in">console</span>.log(result.add(resutl.word, <span class="number">5</span>));</span><br></pre></td></tr></table></figure><p><strong>但是上面的写法还是有点麻烦，可以进一步简化，比如通过对象字面量，或者直接在写函数的最开始就直接module.export</strong></p><pre><code>改写一：</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports.number = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'这个数组一共有 '</span>+ arr.length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports.add = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'这两个数量的和等于 '</span>+ (a+b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports.word = <span class="number">4</span>;</span><br></pre></td></tr></table></figure><pre><code>改写二（对象字面量）：</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'这个数组一共有 '</span>+ arr.length;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'这两个数量的和等于 '</span>+ (a+b);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> word = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    number: number,</span><br><span class="line">    add: add,</span><br><span class="line">    word: word</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nodejs系列从入门到制作APP(八)Event模块</title>
      <link href="/nodejs-app-8.html"/>
      <url>/nodejs-app-8.html</url>
      
        <content type="html"><![CDATA[<h3 id="event-模块"><a href="#event-模块" class="headerlink" title="event 模块"></a>event 模块</h3><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"><span class="keyword">var</span> emitter = <span class="keyword">new</span> events.EventEmitter();</span><br><span class="line">emitter.on(<span class="string">'someEvent'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">emitter.emit(<span class="string">'someEvent'</span>,<span class="string">'hi, how are you?'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> emitter = <span class="keyword">new</span> events.EventEmitter();这里相当于是新建了一个实例；</span><br><span class="line"> emitter.on就相当于绑定了一个someEvent事件；</span><br><span class="line"> emitter.emit执行someEvent并传递参数；</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nodejs系列从入门到制作APP(六)模块和require()</title>
      <link href="/nodejs-app-6.html"/>
      <url>/nodejs-app-6.html</url>
      
        <content type="html"><![CDATA[<p><strong>当我们写nodejs app的时候，并不会把所有的代码都放在一个文件里面，这样在后期很难维护，代码复用低。所以我们把整个代码分成不同module(模块)，然后在需要的时候，通过require来使用;</strong></p><a id="more"></a><p>案例：</p><ul><li><p>首先创建一个普通的函数表达式，然后运行，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="function"><span class="keyword">function</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'这个数组一共有 '</span> + array.length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(counter[<span class="string">'你'</span>,<span class="string">'我'</span>,<span class="string">'他'</span>]);</span><br></pre></td></tr></table></figure></li><li><p>接下来，如果我们想把上面的代码放在两个不同的文件里面，比如把 number这个函数放在 number.js 模块文件，然后把调用这个函数的代码放在app.js</p></li><li>需要我们在number.js文件里面使用module.export，这样相当于表明，number这个模块可以被调用;<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="function"><span class="keyword">function</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'这个数组一共有 '</span>+ array.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">module</span>.exports = number;</span><br></pre></td></tr></table></figure></li></ul><p>在app.js文件里面require获取 number.js 文件里面的number模块，存放在变量中;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="built_in">require</span>(<span class="string">'./number'</span>);</span><br><span class="line"><span class="comment">//require后面跟的是文件路径, ./表示在当前文件夹路径下</span></span><br><span class="line"><span class="built_in">console</span>.log(number[<span class="string">'你'</span>,<span class="string">'我'</span>]);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nodejs系列从入门到制作APP(五)函数表达式</title>
      <link href="/nodejs-app-5.html"/>
      <url>/nodejs-app-5.html</url>
      
        <content type="html"><![CDATA[<p><strong>函数表达式和nodejs有什么联系呢？因为函数表达式这种模式在nodejs时也会使用。</strong></p><a id="more"></a><p>匿名普通函数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hi'</span>);</span><br><span class="line">&#125;</span><br><span class="line">hello();</span><br></pre></td></tr></table></figure></p><pre><code>函数表达式：</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hi'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">hello();</span><br></pre></td></tr></table></figure><pre><code>把函数作为参数来传递</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hi'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callFunction</span>(<span class="params">fun</span>)</span>&#123;</span><br><span class="line">    fun();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">callFunction(hello);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nodejs系列从入门到制作APP(四)全局对象</title>
      <link href="/nodejs-app-4.html"/>
      <url>/nodejs-app-4.html</url>
      
        <content type="html"><![CDATA[<h2 id="全局对象"><a href="#全局对象" class="headerlink" title="全局对象"></a>全局对象</h2><p><strong>在js中，window是全局对象，但当我们在nodejs中写js的时候，全局对象不再是window, 因为我们不再是浏览器客户端，而是服务端。</strong></p><p><strong>Nodejs中的global对象就是其本身，但是它有很多的方法。比如&#95;&#95;dirname, &#95;&#95;filename, console, exports, module, setInterval, setTimeout等；</strong></p><p><strong>小案例：( setInterval, 和 setTimeout用法)</strong></p><a id="more"></a><ul><li>在app.js中输入</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'三秒钟之后文字才显示'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>也可以使用setInterval</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="number">0</span>;</span><br><span class="line">    setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">time+=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(time + <span class="string">' 秒已经过去了'</span>);</span><br><span class="line">&#125;,<span class="number">2000</span>);</span><br><span class="line"><span class="string">`&lt;/pre&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">这个时候终端会一直输入，进入循环，可以用ctrl + c 结束进程，或者也可以如下，使用clearInterval;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;pre&gt;`</span><span class="keyword">var</span> time = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">time+=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(time + <span class="string">' 秒过去了'</span>);</span><br><span class="line"><span class="keyword">if</span>(time &amp;gt; <span class="number">5</span>)&#123;</span><br><span class="line">    clearInterval(timer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> &#125;,<span class="number">2000</span>)</span><br></pre></td></tr></table></figure><p>获取路径名字 <code>console.log(__dirname);</code> 获取文件名字 <code>console.log(__filename);</code></p>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nodejs系列从入门到制作APP(三)V8 引擎</title>
      <link href="/nodejs-app-3.html"/>
      <url>/nodejs-app-3.html</url>
      
        <content type="html"><![CDATA[<h3 id="什么是V8引擎"><a href="#什么是V8引擎" class="headerlink" title="什么是V8引擎"></a>什么是V8引擎</h3><p>摘自百度，感觉比我个人的语言解释的清楚多了：</p><blockquote><p>V8使用C++开发，并在谷歌浏览器中使用。在运行JavaScript之前，相比其它的JavaScript的引擎转换成字节码或解释执行，V8将其编译成原生机器码（IA-32, x86-64, ARM, or MIPS CPUs），并且使用了如内联缓存（inline caching）等方法来提高性能。有了这些功能，JavaScript程序在V8引擎下的运行速度媲美二进制程序。</p></blockquote><p>我想这也就是为什么nodejs运行起来非常快的原因了。</p>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nodejs系列从入门到制作APP(二)安装</title>
      <link href="/nodejs-app-2.html"/>
      <url>/nodejs-app-2.html</url>
      
        <content type="html"><![CDATA[<p>安装直接去官网<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a> ， 按照提示来操作就行。</p><a id="more"></a><p><strong>如何判断是否已经成功安装了node?</strong></p><p>(windows用户) win + r ，输入cmd，打开命令行工具，输入node -v查看版本，如果正确安装，会返回nodejs版本;</p><p>一般情况下，启动node需要使用命令行，但是webstorm自带了终端，这样就不需要在cmd和开发工具进行切换了。</p><p><strong>第一个小案例</strong></p><p>创建一个app.js文件，并且输入<code>console.log(&#39;I am learing nodejs&#39;);</code> 然后在cmd或者编辑器自带terminal里面输入 node app.js 或者node app也行； 这个时候终端会输出I am learing nodejs;</p><blockquote><p>注意如果是在cmd工具中运行node，需要首先保证是在当前文件的路径，可以使用cd 然后把文件夹拖到cmd窗口中，enter就切换到当前路径了；</p><p>命令行工具中，cd表示change directory，就是改变路径，后面跟想要改变的路径名, cd . . 表示返回上一层路径, cd ~ 返回到根目录;</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nodejs系列从入门到制作APP(一)介绍</title>
      <link href="/nodejs-app-1.html"/>
      <url>/nodejs-app-1.html</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>Nodejs系列从入门到APP大致分为三个部分</strong>:</p></blockquote><ul><li><p>Nodejs工作原理等实现，</p><ul><li>v8 engine</li><li>module</li><li>event emitter</li><li>file</li></ul></li><li><p>server相关：</p><ul><li>routing</li><li>express</li><li>template</li></ul></li><li>最后要搭建一个清单列表;</li></ul><a id="more"></a><p><strong>Nodejs是什么？</strong></p><ul><li>nodejs可以说是一个执行环境，可以让我们在服务端(脱离浏览器)运行js代码，而在此之前js代码是在浏览器中运行，要在后端执行代码，要学后端语言，比如php，ruby等;</li><li>nodejs拥有后端语言的功能，可以让我们更轻松地对文件进行修改，删除，更新，与数据库沟通：</li></ul><p><strong>Nodejs优点：</strong></p><ul><li>学习成本低。因为nodejs使用js，所以没有必要额外学习后端语言；</li><li>速度快。因为使用v8 engine &amp; non-blocking code( v8 引擎和非阻塞式代码);</li><li>强大的开源生态系统</li></ul>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git中的ssh,https有何不同</title>
      <link href="/git-ssh.html"/>
      <url>/git-ssh.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>git中的ssh,https有何不同？</p></blockquote><p>克隆项目的时候，使用ssh的话，你需要配置个人的ssh key添加到server上面。而https方式，任意git clone url都可以;</p><p>push项目的时候，在使用ssh方式时，是不需要验证用户名和密码，如果你在配置ssh key时设置了密码，则需要验证密码。而对于使用https方式来讲，每次push都需要验证用户名和密码。</p><blockquote><p>配置ssh key</p></blockquote><p>检查是否存在ssh key，如果有以ssh-rsa开头的字符串，则证明已经存在可以直接用了;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></p><blockquote><p>如果不存在，如何生成;</p></blockquote><p>如果第一次使用git，要先设置自己的用户名和邮箱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;yourname&quot;</span><br><span class="line">$ git config --global user.email &quot;your@email.com&quot;</span><br></pre></td></tr></table></figure><p>生成:直接按enter跳过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;your@email.com&quot;</span><br></pre></td></tr></table></figure></p><p>最后设置ssh key，添加到git中就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS3动画效果使用总结</title>
      <link href="/animation-1.html"/>
      <url>/animation-1.html</url>
      
        <content type="html"><![CDATA[<p>总结一下最近遇到的css3 transform以及keyframes的用法。</p><h3 id="1-transform-translate"><a href="#1-transform-translate" class="headerlink" title="1. transform: translate"></a>1. transform: translate</h3><p><code>transform: translateX(200px)</code></p><p>将选中元素往右边移动200px</p><p>如果是-200px，则是往左边移动200px</p><a id="more"></a><p><code>transform: translateX(200px)</code></p><p>这个是y轴，那么就是往下移动 如果是-200px，那么就是往上移动</p><h3 id="2-transform-scale"><a href="#2-transform-scale" class="headerlink" title="2. transform: scale"></a>2. transform: scale</h3><p><code>transform: scaleX(1)</code></p><p>scale表示放大的意思，如果是1，则是原始值，由此可以只懂啊如果scale(0.5);则指缩小</p><p><code>ransform: scaleY(1.1)</code></p><p>纵坐标上面到1.1倍</p><h3 id="3-transform-rotate"><a href="#3-transform-rotate" class="headerlink" title="3. transform: rotate"></a>3. transform: rotate</h3><p><code>rotateX(90deg)</code></p><p>朝x轴方向旋转90度，就变成了直线</p><p><code>transform: rotateY(90deg)</code></p><p>变成了竖的直线</p><h3 id="4-keyframes用法总结"><a href="#4-keyframes用法总结" class="headerlink" title="4. keyframes用法总结"></a>4. keyframes用法总结</h3><p>首先可以像这样定义keyframes:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> drive &#123;</span><br><span class="line">        <span class="selector-tag">from</span>&#123;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(0);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">to</span>&#123;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(560px);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>然后在要执行动画的元素选择器后面写上： <code>animation: drive 80s linear infinite alternate</code></p><p>这里参数的含义 - 第一个drive是keyframes的名字，之前已经定义了， - 第二个80s是表示的时间 - 第三个linear是表示速度，这里是匀速 - infinite是表示无限运动 - alternate 表示运动方式, 动画先正常运行再反方向运行，然后交替运行</p>]]></content>
      
      
      <categories>
          
          <category> CSS3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>原生JS入门水平实现轮播图</title>
      <link href="/e5-8e-9f-e7-94-9fjs-e5-85-a5-e9-97-a8-e6-b0-b4-e5-b9-b3-e5-ae-9e-e7-8e-b0-e8-bd-ae-e6-92-ad-e5-9b-be.html"/>
      <url>/e5-8e-9f-e7-94-9fjs-e5-85-a5-e9-97-a8-e6-b0-b4-e5-b9-b3-e5-ae-9e-e7-8e-b0-e8-bd-ae-e6-92-ad-e5-9b-be.html</url>
      
        <content type="html"><![CDATA[<p><strong>用原生js实现一个轮播图常见功能</strong></p><ul><li>点击btn, 展示对应index的图片</li><li>点击btn,对应indexbtn高亮显示</li><li>点击prev, next ，展示对应index图片，并且高亮btn</li><li>图片自动播放</li><li>鼠标滑过container, 图片暂停播放</li></ul><a id="more"></a><blockquote><p>这个轮播图是通过位置来设置左右切换等等，也可以通过opacity透明度来进行图片的展示和隐藏</p></blockquote><h3 id="点击btn，展示对应图片"><a href="#点击btn，展示对应图片" class="headerlink" title="点击btn，展示对应图片"></a>点击btn，展示对应图片</h3><ul><li>因为btn是一个数组，和prev不同，所以先循环，再绑定点击事件；</li><li>首先循环获取所有btn，添加id，这样相当于有了index</li><li>然后绑定onclick事件 </li><li>获取当前index</li><li>通过当前index来计算offset偏移值；</li><li>调用偏移函数，传入offset值作为参数；</li><li>同时调用showBtn函数来高亮显示btn;</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;btn.length; i++)&#123;</span><br><span class="line">    btn[i].id = i;</span><br><span class="line">    btn[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> curIndex = <span class="keyword">this</span>.getAttribute(i);</span><br><span class="line">        <span class="keyword">var</span> offset = -(curIndex * move);</span><br><span class="line">        <span class="comment">//这里move就是偏移一个图片的宽度</span></span><br><span class="line">        animate(offset);</span><br><span class="line">        <span class="comment">//调用动画函数，把offset偏移量作为参数传递</span></span><br><span class="line">        showBtn(curIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="showBtn函数"><a href="#showBtn函数" class="headerlink" title="showBtn函数"></a>showBtn函数</h3><p>为什么这个函数要单独写，没有直接放在上面那个for循环里面？因为不仅btn.onclick时候用到，prev.onclick也用到。<br>要实现高亮和不高亮的切换，jquery直接this. siblings， 但是原生的要循环才能获取其他siblings;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showBtn</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;btn.length;i++)&#123;</span><br><span class="line">        btn[j].className = <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    btn[index].className=<span class="string">"on"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="offset偏移函数"><a href="#offset偏移函数" class="headerlink" title="offset偏移函数"></a>offset偏移函数</h3><ul><li>定偏移一个的单位，然后再乘以index，这样就算出当前应该偏移多少</li><li>如何获取单个偏移量，jquery obj.width(); js: obj.offsetWidth</li><li>动画函数的关键在于设置偏移值，就是 obj.style.left = , 要在html写style=”left: 0”</li><li>问题来了，这样就和prev不能同用一个函数了；因为prev,next是以一个偏移图片为单位<br>`function animate(offset){<pre><code>ul.style.left = offset + &quot;px&quot;;}`</code></pre></li></ul><h3 id="prevNext前后函数"><a href="#prevNext前后函数" class="headerlink" title="prevNext前后函数"></a>prevNext前后函数</h3><blockquote><p>不能套用animate函数，因为那个可能直接是index从0到4，这prev, next是加或减一的过程；到底是加，还是减，不确定，所以传参数来解决；凡是涉及到递增或者递减，就要判断是否超出了一个范围；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prevNext</span>(<span class="params">distance</span>)</span>&#123;</span><br><span class="line">        ul.style.left = <span class="built_in">parseInt</span>(list.style.left) + distance + <span class="string">"px"</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">parseInt</span>(ul.style.left)&lt;<span class="number">-2400</span>)&#123;</span><br><span class="line">            ul.style.left = <span class="number">0</span> + <span class="string">"px"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">parseInt</span>(ul.style.left)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            ul.style.left = <span class="number">-2400</span> + <span class="string">"px"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="prev-onclick-函数"><a href="#prev-onclick-函数" class="headerlink" title="prev.onclick 函数"></a>prev.onclick 函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">prev.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        prevNext(obj.style.offsetWidth);</span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">1</span>)&#123;</span><br><span class="line">            index = <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            index--;</span><br><span class="line">        &#125;</span><br><span class="line">        showBtn(index);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="next-onclick函数："><a href="#next-onclick函数：" class="headerlink" title="next.onclick函数："></a>next.onclick函数：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">next.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            prevNext(-obj.style.offsetWidth);</span><br><span class="line">            <span class="keyword">if</span>(index&gt;<span class="number">3</span>)&#123;</span><br><span class="line">                index = <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            index++;</span><br><span class="line">            &#125;</span><br><span class="line">            showBtn(index);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="设置定时器"><a href="#设置定时器" class="headerlink" title="设置定时器"></a>设置定时器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">play</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            next.onclick();</span><br><span class="line">            play();</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stop</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">container.onmouseover = stop;</span><br><span class="line">container.onmouseout = play;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SASS从零开始(二)开始使用</title>
      <link href="/sass-beginner.html"/>
      <url>/sass-beginner.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-变量"><a href="#1-变量" class="headerlink" title="1. 变量"></a>1. 变量</h3><a id="more"></a><p><code>$color: #eee</code>;</p><p>这样就定义了一个变量，然后在sass文件中，不去写#eee，而是直接使用$color来代替，这样以后要修改颜色的话，只要改变量就好了,通过都是把所有的变量存在variables.scss文件中，然后再直接@import “variables”; 这样做的好处就是把不同的单元都分开，便于管理。</p><h3 id="2-嵌套"><a href="#2-嵌套" class="headerlink" title="2. 嵌套"></a>2. 嵌套</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  p &#123;</span><br><span class="line">　　<span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="selector-tag">span</span> &#123;</span><br><span class="line">     <span class="attribute">color</span>: blue;&#125;</span><br><span class="line">　&#125;</span><br></pre></td></tr></table></figure><pre><code>上面这种写法编译出来就是，div p; div span;</code></pre><h3 id="3-伪类怎么写"><a href="#3-伪类怎么写" class="headerlink" title="3. 伪类怎么写"></a>3. 伪类怎么写</h3><p>那么a:hover这种该怎么写呢？还是一样，可以直接写进嵌套里面去。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">   <span class="attribute">color</span>: $color;</span><br><span class="line">   &amp;amp;:hover &#123;</span><br><span class="line">      <span class="selector-tag">color</span>: <span class="selector-id">#000</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面这种编译出来就是a:hover了</p><h3 id="4-mixin-混合-如何使用"><a href="#4-mixin-混合-如何使用" class="headerlink" title="4. mixin(混合)如何使用"></a>4. mixin(混合)如何使用</h3><p>先定义一个mixin，然后再需要调用它的地方再直接@include mixin名字，如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> banner &#123;</span><br><span class="line">      <span class="selector-tag">height</span>: 400<span class="selector-tag">px</span>;</span><br><span class="line">      <span class="selector-tag">img</span> &#123;</span><br><span class="line">         <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-tag">span</span><span class="selector-class">.title</span> &#123;</span><br><span class="line">         <span class="attribute">font-weight</span>: bold;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.front-banner</span> &#123;</span><br><span class="line">   @include banner;</span><br><span class="line">   //下面再写其他样式；</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h3 id="5-如何引入文件"><a href="#5-如何引入文件" class="headerlink" title="5. 如何引入文件"></a>5. 如何引入文件</h3><p>比如之前提到可以把所有的变量存在variables.scss文件里面，然后所有的mixin也放在mixin.scss里面，最后在主要的样式文件里面，直接引入（放在一个文件夹）就可以了。如下：</p><p><code>@import &quot;mixins&quot;</code> <code>@import &quot;variables&quot;</code></p><h3 id="4-数字运算"><a href="#4-数字运算" class="headerlink" title="4. 数字运算"></a>4. 数字运算</h3><p>css仅仅是用来添加样式，完全没有编程的概念，但是sass不同，sass可以写if判断语句，也可以用基础的算法，比如如下这段代码，li宽度的计算；</p><p><code>li {width: (100% / 6)}</code></p><p>这样就相当于把它的宽度变成继承的父元素的6分之一了；随着</p>]]></content>
      
      
      <categories>
          
          <category> SASS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SASS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SASS从零开始(一)安装与使用</title>
      <link href="/sass-install.html"/>
      <url>/sass-install.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-SASS是什么"><a href="#1-SASS是什么" class="headerlink" title="1. SASS是什么"></a>1. SASS是什么</h3><a id="more"></a><p>SASS是一个css样式预处理器，简单来说，就是在css中引入了变量，mixin(混合)，nesting style(嵌套)，引入以及写判断语句等等; 比如像这个样子：</p><pre><code>#main-nav{    background-color: $deepBlue;    ul {       @include nav;       width: 100%;       li {           height: 40px;           line-height: 40px;           }       }}</code></pre><p>上面的例子就是很简单的scss样式，是一层一层嵌套下来，并且把颜色放在变量里面;</p><h3 id="2-为什么要使用SASS"><a href="#2-为什么要使用SASS" class="headerlink" title="2. 为什么要使用SASS"></a>2. 为什么要使用SASS</h3><p>在之前，我个人感觉小的网站还行，一旦网站大了，一个很让人头疼的问题就是css样式命名还有样式层级排名以及继承造成的override问题（不知道这个怎么表述。。。）。后期要再进行修改，也没麻烦。我想这就是别人说的，css写起来容易，管理起来麻烦的原因吧。SASS给我个人的带来的遍历如下：</p><ul><li>可以把颜色，字体大小等都存在变量里，这样后期要修改，只需要改一个地方就Ok;</li><li>可以运用它嵌套的特性，这样统一了，就不用担心样式override问题了，但是一般顶多也就嵌套三层；</li><li>可以写mixin,@include 方法，这样网页中共用的样式就不用重复写了；</li></ul><h3 id="3-如何开始安装与使用"><a href="#3-如何开始安装与使用" class="headerlink" title="3. 如何开始安装与使用"></a>3. 如何开始安装与使用</h3><p>SASS是用ruby语言先的，所以要先去ruby官网下载这个。 另外sass要先编译成css然后再在html中引入，至于编译器，我个人使用prepos, <a href="https://prepros.io/" target="_blank" rel="noopener">https://prepros.io/</a>, 官网免费下载</p><p><img src="http://www.webfront.online/wp-content/uploads/2017/03/sass-1024x814.png" alt=""></p><p>基本上就是在file那里先找到路径，点击最上面的output path选择输出路径，autocompile就是每次在自己ctrl + s 时候，scss为自动编译成css</p><p>output style, 个人一般选择nested， 这样就有缩进，一层一层，看着比较舒服。</p><blockquote><p>sass有两种后缀名：.sass和.scss，前者不使用大括号和分号；后面那个和我们平时写的css文件格式差不多。我都是用.scss，这样比较保险，看着也舒服。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SASS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SASS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Wordpress标签云彩色背景</title>
      <link href="/tagcloud-background-color.html"/>
      <url>/tagcloud-background-color.html</url>
      
        <content type="html"><![CDATA[<p>最初的默认标签云，样式太难看了，效果是这个样子。</p><p><img src="http://www.webfront.online/wp-content/uploads/2017/03/cloud-300x98.png" alt=""></p><p>在自己折腾了一会之后，效果是这样的：</p><p><img src="http://www.webfront.online/wp-content/uploads/2017/03/tag-300x138.png" alt=""></p><h3 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h3><p><strong>1. 添加标签云小工具(widget)</strong></p><p>很简单，直接去 外观—小工具 把对应的标签云(wordpress自带的)拖拽到对应的右侧边栏里面，保存就可以了</p><p><strong>2. 设置css样式</strong></p><p>外观–编辑打开style.css表，同时f12查看对应标签云的class类名，我自己的是 .tagcloud，然后再到style.css里面设置.tagcloud a的颜色样式设置<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.tagcloud</span> <span class="selector-tag">a</span><span class="selector-pseudo">:nth-child(5n)</span>&#123;<span class="attribute">background-color</span>: <span class="number">#00ABA9</span>;&#125;</span><br><span class="line"><span class="selector-class">.tagcloud</span> <span class="selector-tag">a</span><span class="selector-pseudo">:nth-child(5n+1)</span>&#123;<span class="attribute">background-color</span>: <span class="number">#428BCA</span>;&#125;</span><br><span class="line"><span class="selector-class">.tagcloud</span> <span class="selector-tag">a</span><span class="selector-pseudo">:nth-child(5n+2)</span>&#123;<span class="attribute">background-color</span>: <span class="number">#5CB85C</span>;&#125;</span><br><span class="line"><span class="selector-class">.tagcloud</span> <span class="selector-tag">a</span><span class="selector-pseudo">:nth-child(5n+3)</span>&#123;<span class="attribute">background-color</span>: <span class="number">#D9534F</span>;&#125;</span><br><span class="line"><span class="selector-class">.tagcloud</span> <span class="selector-tag">a</span><span class="selector-pseudo">:nth-child(5n+4)</span>&#123;<span class="attribute">background-color</span>: <span class="number">#567E95</span>;&#125;</span><br><span class="line"><span class="selector-class">.tagcloud</span> <span class="selector-tag">a</span>&#123;<span class="attribute">opacity</span>: <span class="number">0.80</span>;<span class="attribute">filter</span>:<span class="built_in">alpha</span>(opacity=80);<span class="attribute">color</span>: <span class="number">#fff</span>;<span class="attribute">background-color</span>: <span class="number">#428BCA</span>;<span class="attribute">display</span>: inline-block;<span class="attribute">margin</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">5px</span> <span class="number">0</span>;<span class="attribute">padding</span>: <span class="number">0</span> <span class="number">6px</span>;<span class="attribute">line-height</span>: <span class="number">21px</span>&#125;</span><br><span class="line"><span class="selector-class">.tagcloud</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">opacity</span>: <span class="number">1</span>;<span class="attribute">filter</span>:<span class="built_in">alpha</span>(opacity=100);&#125;</span><br></pre></td></tr></table></figure></p><p>以上主要是对颜色设置，利用到了nth-child这个选择器，n可以是从0到1，比如5n+1可以表示第一或者第六个的颜色;这里是以5个为一组进行颜色切换，如果觉得选择颜色太少了，也可以8n, 9n来写。</p>]]></content>
      
      
      <categories>
          
          <category> Wordpress </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wordpress </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
